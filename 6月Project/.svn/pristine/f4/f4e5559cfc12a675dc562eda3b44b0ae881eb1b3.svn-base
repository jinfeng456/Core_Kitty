<template>
  <div class="container">
	<!--工具栏-->
	<div class="toolbar" style="float:left;padding-top:10px;padding-left:15px;">
		<el-form :inline="true" :model="filters" :size="size">
			<el-form-item>
				<el-input v-model="filters.srcSoNo" placeholder="来源单号"></el-input>
			</el-form-item>
			<el-form-item>
				<el-input v-model="filters.batchNo" placeholder="批次号"></el-input>
			</el-form-item>
			<el-form-item label="物料类别" prop="itemId" >
						<el-select v-model="filters.itemId"
							placeholder="请选择"
							style="width: 100%;">
							<el-option v-for="item in classTypes"
									:key="item.id"
									:label="item.name"
									:value="item.id">
							</el-option>
				        </el-select>
			</el-form-item>			
			<el-form-item>
				<kt-button :label="$t('action.search')" perms="core:WhDetailBind:view" type="primary" @click="findPage(null)"/>
			</el-form-item>
		</el-form>
	</div>
	<!--表格内容栏-->
	<kt-table2 :myButtons="myButtons" :data="pageResult" :columns="columns" 
		@findPage="findPage" @handleShowStockBind="handleShowStockBind" @handleShowStock="handleShowStock"  :showPagination="true" :showBatchDelete="false">
	</kt-table2>
 	<stock-select :key="componentKey"  :itemDialogVisible="stockDialogVisible" @handleSelect="StockSelects"    @itemHidden="itemHidden" :dataForms="this.dataForm" :showReceipOutId="this.showReceipOutId"></stock-select>
  </div>
</template>

<script>
import KtTable2 from "@/views/Core/KtTable2"
import KtButton from "@/views/Core/KtButton"
import { format } from "@/utils/datetime"
import StockSelect from "@/views/Receipt/ReceiptOut/CheckOut/StockSelect"
export default {
	components:{
			KtTable2,
			StockSelect,
			KtButton
	},
	data() {
		return {
			size: 'small',
			filters: {
				label: ''
			},
			columns: [
				//{prop:"id", label:"主键", minWidth:100},
				{prop:"srcSoNo", label:"来源单号", minWidth:100},
				{prop:"batchNo", label:"批次号", minWidth:100},	
				{prop:"stn", label:"站台", minWidth:100,formatter:this.selectionFormat},				
				{prop:"itemId", label:"物料类别", minWidth:100,formatter:this.selectionFormats},
				//{prop:"batchId", label:"批次主键", minWidth:100},
				{prop:"planCount", label:"计划数量", minWidth:100},				
			],
			pageRequest: { pageNum: 1, pageSize: 8 },
			pageResult: {},
			showReceipOutId:false,
			stockDialogVisible:false,
			operation: false, // true:新增, false:编辑
			editDialogVisible: false, // 新增编辑界面是否显示
			editLoading: false,
			dicts:this.$store.state.dict.dicts,
			componentKey: 0,
			// 新增编辑界面数据
			dataForm: {
				id: null,				
				stn: null,
				batchId: null,	
				planCount: null,	
			},
			classTypes: [],			
			myButtons:[{
				name:"handleShowStockBind",
				perms:"core:whDetailBind:stockBind",
				label:"绑定",
				icon:"fa fa-edit"
			},{
				name:"handleShowStock",
				perms:"core:whDetailBind:showStock",
				label:"查看",
				type:"danger",
				icon:"fa fa-trash"
			}]
		}
	},	
	methods: {
		// 获取分页数据
		findPage: function (data) {
			if(data !== null) {
				this.filters.pageNum=data.pageRequest.pageNum
			    this.filters.pageSize=data.pageRequest.pageSize
			}
			this.$api.receipt.findDetailPage(this.filters).then((res) => {
				this.pageResult = res.data				
			}).then(data!=null?data.callback:'')
		},
		itemHidden:function(){
			this.stockDialogVisible=false;
		},
		//绑定托盘
		handleShowStockBind: function (params) {			
			this.stockDialogVisible = true
			this.showReceipOutId=false
			this.dataForm = Object.assign({}, params.row)
			this.componentKey += 1; 
			console.log(this.dataForm)
		},
		//查看绑定
		handleShowStock: function (params) {		
			this.stockDialogVisible = true
			this.showReceipOutId=true
			this.dataForm = Object.assign({}, params.row)
			this.componentKey += 1; 
		},		
		//加载物料类别分类
		findClassTypes: function () {
			this.$api.classify.findPage().then((res) => {
				this.classTypes = res.data.content			
			})
		},
		StockSelects:function(data){
		 	this.$api.coreStock.UpdateRecepitOutId({id:this.dataForm.id,items:data}).then((res) => {	
				 if(res.code == 200) {
								this.$message({ message: this.$t('action.operateSucess'), type: 'success' })
									this.itemHidden();
									this.getDetials();
							} else {
								this.$message({message: this.$t('action.operateFail') + res.msg, type: 'error'})
							}				
			})	
		},			
		// 时间格式化
      	dateFormat: function (row, column, cellValue, index){
          	return format(row[column.property])
      	},	
		selectionFormats: function (row, column, cellValue, index) {
				let key = ""
				let propt = column.property;
				let val = row[column.property];				
				let dict = this.classTypes;
				for (let i = 0; i < dict.length; i++) {
					if (dict[i].id == val) {
					return dict[i].name;
					}
				}
				return row[column.property]
			},  
		selectionFormat: function (row, column, cellValue, index){
			let key=""
			let propt=column.property;
			if(propt=="stn"){
				key="stnOut"
			}		
		    let val=row[column.property];
			let dict = this.$store.state.dict.dicts[key];
			if(dict==undefined){
					return row[column.property]
			}		
			for(let i=0;i<dict.length;i++){
				if(dict[i].value==val){
					return dict[i].label;
				}
			}
          	return row[column.property]
      	}
	},
	mounted() {
		this.findClassTypes()
	}
}
</script>

<style scoped>

</style>