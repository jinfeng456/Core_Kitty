<template>
  <div class="container" >
	<!--工具栏-->
	<div class="toolbar" style="float:left;padding-top:10px;padding-left:15px;">
		<el-form :inline="true" :model="filters" :size="size">
			<el-form-item>
				<el-input v-model.trim="filters.boxCode" placeholder="托盘条码"></el-input>
			</el-form-item>
			<el-form-item>
				<kt-button :label="$t('action.search')" perms="core:coreTask:view" type="primary" @click="findPage(null)"/>
			</el-form-item>		
		</el-form>
	</div>
	<!--查询列表内容栏-->
	<kt-table :height="388" permsShowDetail="core:coreTask:showDetail" 
		:data="pageResult" :columns="columns" 
		@findPage="findPage" @handleShowDetail="handleShowDetail" :showOperation=false :showDetail=true>
	</kt-table>
	<!--新增编辑界面-->
	<el-dialog :title="'查看'" width="70%" :visible.sync="editDialogVisible" :close-on-click-modal="false">
		<el-form :model="dataForm" label-width="80px"  ref="dataForm" :size="size" label-position="right">
			<el-row :gutter="20">
				<el-col :span="6">
					<el-form-item label="托盘条码" prop="boxCode"  v-if="true">
					<el-input v-model="dataForm.boxCode" auto-complete="off" readonly></el-input>
					</el-form-item>
				</el-col>	
				<el-col :span="6">
					<el-form-item label="状态" prop="status" >
						<el-select v-model="dataForm.status"  style="width: 100%;" disabled="false">
							<el-option v-for="item in dicts.taskStatus" :key="item.value"
								:label="item.label" :value="item.value">
							</el-option>
						</el-select>
					</el-form-item>
				</el-col>
				<el-col :span="6">
					<el-form-item label="任务类型" prop="taskType" >
						<el-select v-model="dataForm.taskType"  style="width: 100%;" disabled="false">
							<el-option v-for="item in dicts.taskType" :key="item.value"
								:label="item.label" :value="item.value">
							</el-option>
						</el-select>
					</el-form-item>
				</el-col>				
			</el-row>
			<el-row :gutter="20">
				<el-col :span="6">
					<el-form-item label="最大库存" prop="maxStock"  v-if="true">
					<el-input v-model="dataForm.maxStock" auto-complete="off" readonly></el-input>
					</el-form-item>
				</el-col>	
				<el-col :span="6">
					<el-form-item label="出库类型" prop="bussType" >
						<el-select v-model="dataForm.bussType"  style="width: 100%;" disabled="false">
							<el-option v-for="item in dicts.outType" :key="item.value"
								:label="item.label" :value="item.value">
							</el-option>
						</el-select>
					</el-form-item>

				</el-col>				
			</el-row>

			<!-- <el-form-item label="" prop="id"  v-if="false">
				<el-input v-model="dataForm.id" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="stockId"  v-if="false">
				<el-input v-model="dataForm.stockId" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="areaId"  v-if="false">
				<el-input v-model="dataForm.areaId" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="托盘条码" prop="boxCode"  v-if="true">
				<el-input v-model="dataForm.boxCode" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="状态" prop="status"  v-if="true">
				<el-input v-model="dataForm.status" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="任务类型" prop="taskType"  v-if="true">
				<el-input v-model="dataForm.taskType" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="createTime"  v-if="false">
				<el-input v-model="dataForm.createTime" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="finshTime"  v-if="false">
				<el-input v-model="dataForm.finshTime" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="relyTaskId"  v-if="false">
				<el-input v-model="dataForm.relyTaskId" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="最大库存" prop="maxStock"  v-if="true">
				<el-input v-model="dataForm.maxStock" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="info"  v-if="false">
				<el-input v-model="dataForm.info" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="bussType"  v-if="false">
				<el-input v-model="dataForm.bussType" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="出库类型" prop="priority"  v-if="true">
				<el-input v-model="dataForm.priority" auto-complete="off"></el-input>
			</el-form-item>
			<el-form-item label="" prop="src"  v-if="false">
				<el-input v-model="dataForm.src" auto-complete="off"></el-input>
			</el-form-item> -->
		</el-form>	
		<kt-table-list :height="300" 
		:data="pageResultDetail" :columns="detailColumns">
		</kt-table-list>			
	</el-dialog>	
  </div>
</template>

<script>
import KtTable from "@/views/Core/KtTable"
import KtButton from "@/views/Core/KtButton"
import { format } from "@/utils/datetime"
import KtTableList from "@/views/Core/KtTableList"
export default {
	components:{
			KtTable,
			KtButton,
			KtTableList
	},
	data() {
		return {
			size: 'small',
			filters: {
				label: ''
			},
			dicts:{},
			columns: [
				//{prop:"id", label:"编号", minWidth:100},
				//{prop:"stockId", label:"", minWidth:100},
				//{prop:"areaId", label:"", minWidth:100},
				{prop:"boxCode", label:"托盘条码", minWidth:100},
				{prop:"status", label:"状态", minWidth:100,formatter:this.selectionFormat},
				{prop:"maxStock", label:"最大库存", minWidth:100},
				{prop:"bussType", label:"出库类型", minWidth:100,formatter:this.selectionFormat},
				{prop:"taskType", label:"任务类型", minWidth:100,formatter:this.selectionFormat},
				{prop:"createTime", label:"创建时间", minWidth:120,formatter:this.dateFormat},
				{prop:"finshTime", label:"完成时间", minWidth:120,formatter:this.dateFormat},
				//{prop:"relyTaskId", label:"", minWidth:100},			
				//{prop:"info", label:"", minWidth:100},			
				//{prop:"priority", label:"", minWidth:100},
				//{prop:"src", label:"", minWidth:100},
			],
			detailColumns: [
				//{prop:"id", label:"", minWidth:100},
				//{prop:"wmsTaskId", label:"", minWidth:100},
				//{prop:"detailId", label:"", minWidth:100},
				{prop:"des", label:"排序", minWidth:100},
				{prop:"pos", label:"机器人", minWidth:100},
				{prop:"wmsBanchNo", label:"优先级", minWidth:100},
				{prop:"createTime", label:"创建时间", minWidth:120,formatter:this.dateFormat},
				{prop:"finshTime", label:"完成时间", minWidth:120,formatter:this.dateFormat},
				{prop:"status", label:"状态", minWidth:100,formatter:this.selectionFormat},
			],
			pageRequest: { pageNum: 1, pageSize: 8 },
			pageResult: {},
			pageResultDetail: {},
			operation: false, // true:新增, false:编辑
			editDialogVisible: false, // 新增编辑界面是否显示
			editLoading: false,
			dataFormRules: {
				label: [
					{ required: true, message: '请输入名称', trigger: 'blur' }
				]
			},
			// 新增编辑界面数据
			dataForm: {
				id: null,
				stockId: null,
				areaId: null,
				boxCode: null,
				status: null,
				taskType: null,
				createTime: null,
				finshTime: null,
				relyTaskId: null,
				maxStock: null,
				info: null,
				bussType: null,
				priority: null,
				src: null,
			}
		}
	},
	methods: {
		// 获取分页数据
		findPage: function (data) {			
			if(data !== null) {
				this.filters.pageNum=data.pageRequest.pageNum
			    this.filters.pageSize=data.pageRequest.pageSize
			}
			this.$api.coreTask.findPage(this.filters).then((res) => {
				this.pageResult = res.data
			}).then(data!=null?data.callback:'')
		},		
		// 获取明细数据
		findDetailPage: function (data) {
			this.dicts=this.$store.state.dict.dicts
			this.$api.coreTask.GetListByTaskId(data).then((res) => {
				this.pageResultDetail = {content:res.data}
			}).then(data!=null?data.callback:'')
		},		
		// 显示详情界面
		handleShowDetail: function (params) {
			this.editDialogVisible = true
			this.dataForm = Object.assign({}, params.row)
			this.findDetailPage(params.row);
		},	
		// 时间格式化
      	dateFormat: function (row, column, cellValue, index){
          	return format(row[column.property])
      	},
		selectionFormat: function (row, column, cellValue, index){
			let key=""
			let propt=column.property;
			if(propt=="taskType"){
				key="taskType" 
			}else if(propt=="status"){
				key="taskStatus"
			}else if(propt=="bussType"){
				key="outType"
			}		
			let val=row[column.property];	
			let dict = this.$store.state.dict.dicts[key];
			if(dict==undefined){
					return row[column.property]
			}
			for(let i=0;i<dict.length;i++){
				if(dict[i].value==val){
					return dict[i].label;
				}
			}
          	return row[column.property]
      	}
	}
}
</script>

<style scoped>

</style>