using System;
using System.Text;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;

using System.Collections.Generic;

namespace HY.WMS.Common.DAL {//
    public class BaseDAL
    {
    
        private String _connStr;
        protected String connStr
        {
            get{
                if(_connStr == null) {
                    _connStr = ConfigurationManager.ConnectionStrings["DB_WMS"].ConnectionString;
                }
            
                      
                return _connStr;
            }
           
        }

       
       
        public DataSet Query(string sql) {
            DataSet ds = new DataSet();
            using(SqlConnection DB_WCS = new SqlConnection(connStr)) {
                DB_WCS.Open();      //打开数据库  
                SqlDataAdapter adp = new SqlDataAdapter(sql,DB_WCS);
                adp.Fill(ds);
            }
           
            return ds;
        }
        public DataSet Query(string sql,List<SqlParameter> parameters) {
            DataSet ds = new DataSet();
            using(SqlConnection DB_WCS = new SqlConnection(connStr)) {

                using(SqlCommand cmd = DB_WCS.CreateCommand()) {
                    DB_WCS.Open();
                    cmd.CommandText = sql;
                    cmd.Parameters.AddRange(parameters.ToArray());
                    SqlDataAdapter adp = new SqlDataAdapter(cmd);
                    adp.Fill(ds);
                }
                
            }

            return ds;
        }




        //2.下面来封装第一个SqlHepler方法，封装一个执行的sql 返回受影响的行数。
        public  int ExecuteNonQuery(string sqlText,params SqlParameter[] parameters) {
            using(SqlConnection conn = new SqlConnection(connStr)) {
                using(SqlCommand cmd = conn.CreateCommand()) {
                    conn.Open();
                    cmd.CommandText = sqlText;
                    cmd.Parameters.AddRange(parameters);
                    return cmd.ExecuteNonQuery();
                }
            }
        }
        //3.继续封装一个查询操作，返回查询结果中的第一行第一列的值
        public  object ExecuteScalar(string sqlText,params SqlParameter[] parameters) {
            using(SqlConnection conn = new SqlConnection(connStr)) {
                using(SqlCommand cmd = conn.CreateCommand()) {
                    conn.Open();
                    cmd.CommandText = sqlText;
                    cmd.Parameters.AddRange(parameters);
                    return cmd.ExecuteScalar();
                }
            }
        }
        //4.在封装个常用的查询方法，返回一个DataTable
        public  DataTable ExecuteDataTable(string sqlText,params SqlParameter[] parameters) {
            using(SqlDataAdapter adapter = new SqlDataAdapter(sqlText,connStr)) {
                DataTable dt = new DataTable();
                adapter.SelectCommand.Parameters.AddRange(parameters);
                adapter.Fill(dt);
                return dt;
            }
        }
        //5.最后在写封装一个查询方法,该方法返回的是一个SqlDataReader类型
        public  SqlDataReader ExecuteReader(string sqlText,params SqlDataReader[] parameters) {
            //SqlDataReader要求，它读取数据的时候有，它独占它的SqlConnection对象，而且SqlConnection必须是Open状态
            SqlConnection conn = new SqlConnection(connStr);//不要释放连接，因为后面还需要连接打开状态
            SqlCommand cmd = conn.CreateCommand();
            conn.Open();
            cmd.CommandText = sqlText;
            cmd.Parameters.AddRange(parameters);
            //CommandBehavior.CloseConnection当SqlDataReader释放的时候，顺便把SqlConnection对象也释放掉
            return cmd.ExecuteReader(CommandBehavior.CloseConnection);
        }


        //6.调用存储过程
        public  DataTable StoredProcedure(string name,string value) {
            SqlConnection conStr = new SqlConnection(connStr);
            SqlCommand comStr = new SqlCommand(name,conStr);
            comStr.CommandType = CommandType.StoredProcedure;

            comStr.Parameters.Add("@Name",SqlDbType.Text).Value = value;
            conStr.Open();//打开数据库连接
            SqlDataAdapter sqlData = new SqlDataAdapter(comStr);
            DataTable dt = new DataTable();
            sqlData.Fill(dt);
            conStr.Close();//关闭连接 
            return dt;
           
        }

        public DataTable StoredProcedure(string name,SqlParameter[] value) {
            SqlConnection conStr = new SqlConnection(connStr);
            SqlCommand comStr = new SqlCommand(name,conStr);
            comStr.CommandType = CommandType.StoredProcedure;

            comStr.Parameters.AddRange(value);
            conStr.Open();//打开数据库连接
            SqlDataAdapter sqlData = new SqlDataAdapter(comStr);
            DataTable dt = new DataTable();
            sqlData.Fill(dt);
            conStr.Close();//关闭连接 
            return dt;

        }
    }



    
}
