using System;

using CMNetLib.Robots.Crane;

using GK.WCS.Common;
using GK.WCS.Common.task;
using GK.WCS.Common.Util;
using System.Collections.Generic;
using GK.WCS.Common.pool;

namespace GK.WCS.Crane
{
    public class CranePool:PoolBase {
       public static CranePool instance=null;
        static CranePool(){
            instance = new CranePool();
        }
        public  Dictionary<int,RobotStatus> statusDict = new Dictionary<int,RobotStatus>();
        public  Dictionary<int,bool> FaultDict = new Dictionary<int,bool>();
      

        public  Dictionary<int ,string> ErrLogDict=new Dictionary<int,string>();
        public  Dictionary<int,string> WarningDict = new Dictionary<int,string>();
      
        public  void set(int craneId,RobotStatus status) {

            if(statusDict.ContainsKey(craneId)) {
                statusDict[craneId] = status;
                updateReflashTime(craneId);
            } else {
                statusDict.Add(craneId,status);
                updateReflashTime(craneId);
            }
         
        }
        public  RobotStatus get(int craneId) {

            if(ErrLogDict.ContainsKey(craneId)) {
                return statusDict[craneId];
            } else {
                return null;
            }
        }

        public  bool isFault(int craneId) {

            if(FaultDict.ContainsKey(craneId)) {
                return FaultDict[craneId];
            } else {
                return true;
            }
        }

        public  void setFault(int craneId,bool fault) {
            if(FaultDict.ContainsKey(craneId)) {
                FaultDict[craneId] = fault;

            } else {
                FaultDict.Add(craneId,fault);
            }
        }

        public  void setErrLog(int craneId,String log) {
            if(ErrLogDict.ContainsKey(craneId)) {
                ErrLogDict[craneId] = log;
            
            } else {
                ErrLogDict.Add(craneId,log);
            }


        }

        public  String getErrLog(int craneId) {
            if(ErrLogDict.ContainsKey(craneId)) {
               return  ErrLogDict[craneId];

            } else {
                return String.Empty;
            }


        }

        public  void setWarning(int craneId,String log) {
            if(WarningDict.ContainsKey(craneId)) {
                WarningDict[craneId] = log;

            } else {
                WarningDict.Add(craneId,log);
            }


        }

        public  String getWarning(int craneId) {
            if(WarningDict.ContainsKey(craneId)) {
                return WarningDict[craneId];

            } else {
                return String.Empty;
            }


        }


        public  bool isAuto(int CraneId) {
            var _status = get(CraneId);
            if(_status == null) {
                return false;
            }
            string err = CraneTools.CheckRobot(_status);

            if(!string.IsNullOrEmpty(err)) {

                return false;
            }

            if(_status.Cranestatus == CraneStatus.Manual || _status.Cranestatus == CraneStatus.SystemManual) {
                return false;
            }
            if(_status.Cranestatus == CraneStatus.Semimode) {//自动
                return true;
            } else {
                return false;
            }

        }
    }
}
