
using System.Collections.Generic;

using CMNetLib.Robots.Crane;
using GK.WCS.DAL;
using GK.WCS.Entity;
using GK.WCS.Common;
using GK.WCS.Crane.dto;

namespace GK.WCS.Crane {
    public abstract class CraneSimpleForkTask:CraneAllocateJobHX {


        ITaskCarrierServer carrierDAL = ServerFactray.getServer<ITaskCarrierServer>();
        INoTaskControlServer contralDal = ServerFactray.getServer<INoTaskControlServer>();

        IPhysicalLocationServer dictDal = ServerFactray.getServer<IPhysicalLocationServer>();

        public CraneSimpleForkTask(int id) : base(id) {
        }
        sealed public override TaskModel analyseTaskModel() {
        
            List<TaskStatusModel> models = status.TaskState;
            List<TaskCrane> tcList = craneTaskDAL.getWorkingTask(CraneId);
            TaskCrane Task1 = null;
            if(tcList.Count == 1) {
                Task1 = tcList[0];
            }
            if(tcList.Count > 1) {
                LoggerCommon.fileAll(CraneId+"数据库未完成任务过多");
                return null;
            }
           
            int t1 = TaskStatusUtil.task2Type(Task1);
            bool val = TaskStatusUtil.check(models[0],Task1);
            if(!val) {
                LoggerCommon.fileAll("数据库与垛机任务步匹配");
                return null;
            }
            int x = decimal.ToInt32(status.NowX);
            int y = decimal.ToInt32(status.NowY);
           
            if(t1 == 1 ) {//都空闲
                return type1(x,y);
            } else if(t1 == 3) {//取货完成
                return CraneTools.ConvertTaskModel(rt,Task1,1);
            } 
            return null;
        }
        TaskModel type1(int x,int y) {
            List<FullTask> res = getCanWorkingData();
            TaskOrder order = MathUtil.pick2(x,y,res);
            List<TaskCrane> list = order.toCraneList();
            return CraneTools.ConvertTaskModel(rt,list[0],1);
        }

        public override TaskModel preExecution() {
            return null;
        }
    }
}