using System;
using System.Collections.Generic;
using System.Windows.Forms;
using GK.WCS.Client.Station;
using CMNetLib.Robots.Crane;
using GK.WCS.Entity;
using GK.WCS.DAL;
using GK.WCS.Client.Control;
using GK.WCS.Client;

namespace GK.WCS.Client.Control
{
    public partial class CraneAuto:BaseControl {

        public int CraneId=0;
        public List<RadioButton> rbList = new List<RadioButton>();
        public CraneAuto()
        {
            InitializeComponent();
            var values = Enum.GetValues(typeof(SemiAuto));
            List<String> list = new List<string>();
            list.Add("行走");
            list.Add("取货");
            list.Add("放货");
            cboxSEMI_AUTOActionType.DataSource = list;
            semiAutoPanel.Enabled = true;

            List<String> list2 = new List<string>();
            list2.Add("1号货叉");
            list2.Add("2号货叉");
            forkNoBox.DataSource= list2;



            List<String> list3 = new List<string>();
            list3.Add("宽");
            list3.Add("窄");
            comboBox1.DataSource= list3;

            rbList.Add(rb1191);
            rbList.Add(rb1192);
            rbList.Add(rb1211);
            rbList.Add(rb1212);

            rbList.Add(rb2351);
            rbList.Add(rb2352);
            rbList.Add(rb2331);
            rbList.Add(rb2332);
            rbList.Add(rb2141);
            rbList.Add(rb2142);
            rbList.Add(rb2161);
            rbList.Add(rb2162);
            checkBox1_CheckedChanged(null,null);

        }

        public void ShowInfo(int craneId) {
            if(CraneId == craneId) {
                return;
            }

            this.Invoke(new Action(() => {
                this.CraneId = craneId;
                srcShelveList.DisplayMember = "value";
                srcShelveList.ValueMember = "key";
                srcShelveList.DataSource = CU.getShelves(CraneId);
                if(craneId == 4) {
                    comboBox1.Visible = false;
                    label2.Visible = false;
                    label1.Visible = false;
                    forkNoBox.Visible = false;
                    srcDeepLable.Visible = false;
                    srcDeep.Visible = false;
                } else {
                    comboBox1.Visible = true;
                    label2.Visible = true;
                    label1.Visible = true;
                    forkNoBox.Visible = true;
                    srcDeepLable.Visible = true;
                    srcDeep.Visible = true;
                }
                ;
            }));



        }

        public List<Pare> SourceShelve
        {
            get; set;
        }
      

        private void btnExcuteSEMI_AUTO_Click(object sender,EventArgs e) {

            IRTConfigServer rTConfigServer = ServerFactray.getServer<IRTConfigServer>();
            RTConfig rt = rTConfigServer.GetRTConfig(CraneId);
            if(rt.Cranestatus != 2) {
                info("当前非自动状态，不可下达命令");
                return;
            }
            String src = "";
            if(checkBox1.Checked) {

                Pare sl = srcShelveList.SelectedItem as Pare;
                 src = sl.key;
                if(src.Length <= 3) {
                    String she = (string)srcCol.Text;
                    String sRow = (String)srcRow.Text;
                    if(int.Parse(she) > 17) {
                        info("最多17列");
                        return;
                    }
                    if(int.Parse(sRow) > 18) {
                        info("最多18层");
                        return;
                    }
                    src += she + sRow;
                }
            }
            int forkNo = 1;
            int lenType = 1;
            if(CraneId != 4) {

                if(forkNoBox.Text == "1号货叉") {
                    forkNo = 1;
                } else if(forkNoBox.Text == "2号货叉") {
                    forkNo = 2;
                } else {
                    forkNo = 0;
                }
                
                if(comboBox1.Text == "宽") {
                    lenType = 2;
                } else
                if(comboBox1.Text == "窄") {
                    lenType = 1;
                }
                src += srcDeep.Text;
                
            }
            if(!checkBox1.Checked) {
                src = "";
                foreach(RadioButton rb in rbList) {
                    if(rb.Checked) {
                        src = rb.Name.Substring(2);
                     
                    }
                }
                
            }
            if(String.IsNullOrWhiteSpace(src)) {
                return;
            }

            String way = cboxSEMI_AUTOActionType.Text;
            int smatCodeField = 0;
            if(way == "取货") {
                smatCodeField = 2;
            } else if(way == "放货") {
                smatCodeField = 3;
            } else if(way == "行走") {
                smatCodeField =4;
            } else {
                return;
            }

            if(src.StartsWith("1")) {
                int point = int.Parse(src) + (CraneId - 1) * 40;
                src = point + "";
            }
            if(src.StartsWith("2")) {
                int point = int.Parse(src) ;
                if(point > 2300) {//上面
                     point = point - (CraneId - 1) * 40;
                } else {//下面
                     point = point + (CraneId - 1) * 40;
                }
                src = point + "";

            }

            String infod = DoSemiAutoTask(CraneId,src,smatCodeField,forkNo,lenType);
            info(infod);
        }

        public  string DoSemiAutoTask(int CraneId,String des,int smatCodeField,int forkNo, int lenType) {
            if(des == null)
                return "起始结束位置均为空";
           

           

            if(HttpCraneUtil.sendTask(CraneId,forkNo,des,smatCodeField,lenType)) {
                return @"自动任务发送成功";
            } else {
                return "自动任务发送失败";
            }
        }


        void updateComboBox(String key,ComboBox row,ComboBox col,ComboBox desDeep) {

            row.Items.Clear();
            String[] rowdata = CU.getRow(key,1,18);
            row.Items.AddRange(rowdata);
            row.SelectedIndex = 0;
        

            col.Items.Clear();
            col.Items.AddRange(CU.getRow(key,0,36));
            col.SelectedIndex = 0;
       
            desDeep.Items.Clear();
            desDeep.Items.AddRange(CU.getRow(key,1,12));
            desDeep.SelectedIndex = 0;
         

        }

      

        private void ShelveList_SelectedIndexChanged(object sender,EventArgs e) {
            var ctrl = sender as ComboBox;
            if(ctrl == null)
                return;
            var tag = ctrl.Tag.ToString();
            if(string.IsNullOrEmpty(tag))
                return;
            Pare sl = ctrl.SelectedItem as Pare;
            if(sl == null)
                return;
            String key = sl.key;
           updateComboBox(key,srcRow,srcCol,srcDeep);

        }

        private void comboBox1_SelectedIndexChanged(object sender,EventArgs e) {

        }

        private void radioButton4_CheckedChanged(object sender,EventArgs e) {

        }

        private void checkBox1_CheckedChanged(object sender,EventArgs e) {

            srcShelveList.Enabled = checkBox1.Checked;

            srcCol.Enabled = checkBox1.Checked;
            srcRow.Enabled = checkBox1.Checked;
            srcDeep.Enabled = checkBox1.Checked;

            rb1191.Enabled = !checkBox1.Checked;
            rb1192.Enabled = !checkBox1.Checked;
            rb1211.Enabled = !checkBox1.Checked;
            rb1212.Enabled = !checkBox1.Checked;

            rb2351.Enabled = !checkBox1.Checked;
            rb2352.Enabled = !checkBox1.Checked;
            rb2331.Enabled = !checkBox1.Checked;
            rb2332.Enabled = !checkBox1.Checked;
            rb2141.Enabled = !checkBox1.Checked;
            rb2142.Enabled = !checkBox1.Checked;
            rb2161.Enabled = !checkBox1.Checked;
            rb2162.Enabled = !checkBox1.Checked;
        }
    }
}
