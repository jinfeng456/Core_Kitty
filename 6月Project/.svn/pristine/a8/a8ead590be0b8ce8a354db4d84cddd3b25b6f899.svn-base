using System;
using System.Collections.Generic;
using System.Linq;
using CMNetLib.Robots.CarrierChain;
using GK.Mongon.entity;
using GK.WCS.Common;
using GK.WCS.Common.core.dto;

namespace GK.WCS.Carrier {
    //美芝输送线
    public abstract class CarrierSignal:ZtTask {
        protected CarrierChainReaderConnect connect;
        protected int plcId;


        public CarrierSignal() {
            time = 300;
        }

        abstract public int signCount();
        //状态2-97
        //100-483 是作为信息 100-107 
        public override void excute() {
            byte[] 
                rs = connect.getData(getDataLength());
          
          
            if(rs == null) {
                return;
            }
            if(rs[0] != 0xFF || rs[rs.Length -2] != 0xFF) {//最后
                return;
            }
            List<byte> telex = rs.Skip(2).Take(rs.Length - 2).ToList();
            telex = ParshMachineData(telex);
            byte[] other = ParshSignalData(telex);
            otherSign(other);
            CarrierPool.instance.updateReflashTime(plcId);
        }
        public abstract ushort getDataLength();
        public virtual void otherSign(byte[] other) {

        }
        private List<byte>  ParshMachineData(List<byte> telex){
             var machineData = telex.Take(telex.IndexOf(0xFF)).ToList();
            if (machineData.Count % 4 != 0) {
                LoggerCommon.fileAll("读取输送线状态报文出错");
                return null;
            }
            CarrierPool.instance.updateMachineState(plcId,machineData);
            var signalData = telex.Skip(machineData.Count + 1).ToList();
            return signalData;

        }


        private byte[] ParshSignalData(List<byte> telex ) {
            if(telex[0] != 0xFF ) {
                LoggerCommon.fileAll("读取光电信号状态报文《起始》出错");
                return  null;
            }
             telex = telex.Skip(1).ToList();
            List<byte> signalData = telex.Take(signCount()*8).ToList();
            if(signalData.Count % 8 != 0) {
                LoggerCommon.fileAll("读取光电信号状态报文出错");
                return null;
            }
            CarrierPool.instance.updateSignalStates(plcId,signalData);
            return  telex.Skip(signalData.Count + 1).ToArray();
        }

       

    

       

        public List<EquipmentPointState> getLogger() {
            Dictionary<int,HySignalState> SignalStates = CarrierPool.instance.SignalStates[plcId];
            Dictionary<int,HyMachineState> MachineStates = CarrierPool.instance.MachineStates[plcId];
            List<EquipmentPointState> res = new List<EquipmentPointState>();
            foreach(var ss in SignalStates) {
                HySignalState s = ss.Value;
                EquipmentPointState eps = new EquipmentPointState("carrierPlc"+ plcId,s.Sid);
                eps.no = s.TaskNo;
                eps.s = s.OnOff ? 1 : 2;
                HyMachineState ms = MachineStates[s.Sid / 10];
                if(ms != null) {
                    eps.e = (int)ms.Status + 10 * (int)ms.ErrCode;
                }


            }
            return res;
        }
    }
}
