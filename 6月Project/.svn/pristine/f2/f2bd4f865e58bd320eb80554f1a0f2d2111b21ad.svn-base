using System;

using CMNetLib.Robots.Crane;

using System.Threading;
using GK.WCS.Common.task;
using GK.WCS.Entity;
using GK.WCS.DAL;
using GK.WCS.Common.Util;

namespace GK.WCS.Crane
{
    public class CraneTools 
    {
        /// <summary>
        /// 开启前检测堆垛机上次未执行完成的任务
        /// </summary>
        /// <param name="CraneId"></param>
        public static bool DoUnfinishedTask(int CraneId) {
            ITaskCraneServer taskCraneServer = ServerFactray.getServer<ITaskCraneServer>();
           



            CraneConnect connect = TaskPool.get<CraneConnect>(CraneId);
            RobotStatus state = CranePool.instance.get(CraneId);
            foreach(TaskStatusModel tsm in state.TaskState) {
                if(tsm.TaskNo <= 0) {
                    continue;
                }
                TaskCrane item = taskCraneServer.GetItem(tsm.TaskNo);
                if(item == null   || item.Status == (int)TaskStatus.SEMIAUTO_COMPLETE) {
                    connect.ClearTaskState(tsm.ForkNo);
                } else {
                    CraneAllocateJobHX job = TaskPool.get<CraneAllocateJobHX>(CraneId);
                    TaskModel st = CraneTools.ConvertTaskModel(job.rt,item,tsm.ForkNo);
                    connect.SendTask(st);
                    Thread.Sleep(2000);
                  
                }
            }
            return true;
        }

       public static int getType(TaskStatusModel models,TaskCrane Task) {
            int craneType1 = 0;//空闲，1取货中，2取货完成，3 放货行走
            if(CraneTools.taskIdle(models)) {//货位空闲
                if(Task != null) {//有放货任务
                    craneType1 = 3;
                } else {
                    craneType1 = 1;
                }
            } else {//如果忙
                if(models.IsIn == 1) {
                    craneType1 = 2;//第一个货叉
                } else {
                    craneType1 = 4;//第一个货叉
                }
            }
            return craneType1;
        }

    

        public static TaskModel ConvertTaskModel(RTConfig rtushort,TaskCrane task,ushort forkNo=1) {
            if (task == null)
                return null;
            int centerDistance = 0;
            if(task.locDir == 1) {
                centerDistance = rtushort.CenterDistance1;
            } else {
                centerDistance = rtushort.CenterDistance2;
            }
            int locX = task.locX;
            int locY = task.locY;
            if(forkNo == 2) {
                locX -= centerDistance;
            }

            int Thickness = 0;
            if(task.itemType == 11) {//光纤 载货
                Thickness = 135;
            
                if(task.locId < 10000) {//代表出入口
                    if(task.locId < 2000) {//1号传输线
                        locX += 300;
                    } else if(task.locId < 3000) {//2号传输线
                        locX -= 300;
                    }
                    locY -= 200;
                }
              
            } else if(task.itemType == 12) {
                Thickness = 175;
            }

            TaskModel model = new TaskModel() {
                TargetX = locX,
                TargetY = locY,
                Fork_Drop_Distance = task.locZ,//放货长度 3-传送线  1-左边  2-右面
                X = locX,
                Y = locY,
                Fork_Pick_Distance = task.locZ,//取货长度 3-传送线  1-左边  2-右面
                Thickness = Thickness,   //1小车 2-货
                ForkNo = forkNo,
                IsIn = (byte)task.MotionType,
                Forkdir = task.locDir == 1 ? ForkDir.LEFT : ForkDir.RIGHT,
                TargetForkDir = task.locDir == 1 ? ForkDir.LEFT : ForkDir.RIGHT,
                TaskNo = task.TaskNo
            };
            if(task.MotionType == 1) {
                model.SMATCode = SemiAutoActionCode.PICKONLY;
            } else if(task.MotionType == 2) {
                model.SMATCode = SemiAutoActionCode.PLACEONLY;
            } else if(task.MotionType == 4) {
                model.SMATCode = SemiAutoActionCode.RUNONLY;
            } else {
               // throw new Exception("task.MotionType" + task.MotionType);
            }

            //测试货位用
           // model.SMATCode = SemiAutoActionCode.RUNONLY;
            return model;
        }
        public static TaskModel ConvertMoveTaskModel(TaskCrane task) {
            if(task == null) {
                return null;
            }
            return toinPoint(task.locX,task.locY,0,0);
        }
        public static TaskModel toinPoint(int x,int y,int X,int Y) {
                TaskCrane lastTask = new TaskCrane();
                if(MathUtil.at(x,y,X,Y)) {
                    return null;
                }
                lastTask.locX =x;
                lastTask.locY =y;
                lastTask.locDir = 1;
                lastTask.MotionType = 4;
                lastTask.TaskNo = TaskUtil.getTaskNo();
                return CraneTools.ConvertTaskModel(null,lastTask);
          
        }


        public static short CovertTaskStatus(TaskStatus state) {
            return (short)state;
        }

        public static string CheckRobot(RobotStatus robotState) {
            string text = string.Empty;
                bool flag2 = robotState.Cranestatus == CraneStatus.INIT;
                if(flag2) {
                    text = "Error.The robot is initializes,please waiting...";
                }
                bool flag3 = robotState.Cranestatus == CraneStatus.Offline;
                if(flag3) {
                    text = "Error.The robot is in offline state";
                }
                if(robotState.errCodeNo >1) {
                    try {
                         text =  rertText(robotState);
                    } catch(Exception ex) {
                        text = "枚举转换报错：" + ex.Message;
                    }
                }
             
            if(!string.IsNullOrEmpty(robotState.errMsg)) {
                text = robotState.errMsg;
            }
            String[] errors = { "Errcode:INIT.The robot state","ModBus TCP ERR","NetWork Error","索引超出了数组界限" };
            foreach(String error in errors) {
                if(text.Contains(error)) {
                    return "";
                }
            }

            return text;
           
        }

        static String rertText(RobotStatus robotState) {
            var forkErrcode = robotState.ForkStatus[1];
            String format = "Errcode:{0},ErrDetail:{1},ForkErrcode{2},errCodeNo:{3}";
            String text = string.Format(format,new object[]
                             {  robotState.errCode.ToString(),
                                robotState.errDatailCode.ToString(),
                                forkErrcode.ToString(),
                                robotState.errCodeNo
                             });

            return text;
        }

        static public bool taskIdle(TaskStatusModel model) {
            if(model.State == TaskStatus.UNLOADED) {
                return true;
            }

            if(model.State == TaskStatus.INIT) {
                return true;
            }

            if(model.State == TaskStatus.SEMIAUTO_COMPLETE) {
                return true;
            }
            return false;

        }

       public static bool isFinsh(TaskCrane tc) {
            if(tc == null) {
                return true;
            }
            int status = tc.Status;
            if(status == 9) {
                return true;
            }
            if(status == 7 ) {
                return true;
            }
           
            return false;
        }
    }
}
