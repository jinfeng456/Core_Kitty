<template>
  <div class="page-container">
    <!--工具栏-->
    <div class="toolbar" style="float:left;padding-top:10px;padding-left:15px;">
      <el-form :inline="true"
               :model="filters"
               :size="size">
        <el-form-item>
          <el-input v-model="filters.receiptNo"
                    :placeholder="'请输入入库单号'"
                    clearable  style="width: 175px;">
            </el-input>
        </el-form-item>
         <el-form-item>
         <search-select :itemlist="this.gysTypes" style="width: 175px;"
                  placeholder="输入框"
                 @itemChange="itemclick" > 
        </search-select>    
      </el-form-item>
       
        <el-form-item>
          <el-select v-model="filters.inType"
                     :placeholder="'请选择入库类型'"
                     style="width: 175px;"
                      clearable>
            <el-option v-for="item in dicts.inType"
                       :key="item.value"
                       :value="item.value"
                       :label="item.label">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item>
          <el-select v-model="filters.stn"
                     :placeholder="'请选择站台号'"
                     style="width:175px;"
                     clearable>
            <el-option v-for="item in dicts.stnOut"
                       :key="item.value"
                       :value="item.value"
                       :label="item.label">
            </el-option>
          </el-select>
        </el-form-item>
           
      </el-form>
    </div>
    <div class="toolbar" style="float:left;padding-top:0px;padding-left:15px;">
		<el-form :inline="true" :model="filters" :size="size">	
		<el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.createBeginTime "
                          placeholder="创建开始时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>
        <el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.createEndTime "
                          placeholder="创建结束时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>	
		<el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.finishBeginTime "
                          placeholder="完成开始时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>
        <el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.finishEndTime "
                          placeholder="完成结束时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>
			<el-form-item>
				<el-form-item>
          <kt-button icon="fa fa-search"
                     :label="$t('action.search')"
                     perms="sys:user:view"
                     type="primary"
                     @click="findPage(null)" />
        </el-form-item>  
			</el-form-item>	
		</el-form>
	</div>
    <div class="toolbar" style="float:right;padding-top:0px;padding-right:0px;">
      <el-form :inline="true"
               :size="size">
        <el-form-item>
          <el-button-group>
            <el-tooltip content="导出Excel" placement="top">
						<el-button icon="fa fa-file-excel-o" @click="exportExcel" /> 
					</el-tooltip>        
          </el-button-group>
        </el-form-item>
      </el-form>
      <!--表格显示列界面-->
      <table-column-filter-dialog ref="tableColumnFilterDialog"
                                  :columns="columns"
                                  @handleFilterColumns="handleFilterColumns">
      </table-column-filter-dialog>
    </div>
    <!--表格内容栏-->
    <kt-table2 :myButtons="myButtons"
               :data="pageResult"
               :columns="filterColumns"
               @findPage="findPage" 
               @handleEdit="handleEdit">
    </kt-table2>   

   <el-dialog :title="'编辑平库入库明细'"
               width="40%"
               :visible.sync="dialogVisible1"
               :close-on-click-modal="false">
         <el-form :model="dataForm"
               label-width="90px"
               :rules="dataFormRules"
               ref="dataForm"
               :size="size"
               label-position="right">
        <el-form-item label="ID"
                      prop="id"
                      v-if="false">
          <el-input v-model="dataForm.id"
                   auto-complete="off"></el-input>
        </el-form-item>
        <el-form-item label="完成数量"
                      prop="finshCount">
          <el-input v-model="dataForm.finshCount"
                    auto-complete="off"></el-input>
        </el-form-item>
         <el-form-item label="入库库区"
                      prop="whAreaId">
          <el-select v-model="dataForm.areaName"
                     placeholder="请选择"
                     style="width: 100%;">
            <el-option v-for="item in dicts.flatStorageArea"
                       :key="item.value"
                       :label="item.label"
                       :value="item.value">
            </el-option>
          </el-select>
        </el-form-item>
         </el-form>
      <div slot="footer"
           class="dialog-footer">
        <el-button :size="size"
                   @click.native="dialogVisible1 = false">{{$t('action.cancel')}}</el-button>
        <el-button :size="size"
                   type="primary"
                   @click.native="submitForm">{{$t('action.submit')}}</el-button>
      </div>
   </el-dialog>
  </div>

</template>

<script>
import PopupTreeInput from "@/components/PopupTreeInput"
import KtTable2 from "@/views/Core/KtTable2"
import SearchSelect from "@/views/Core/SearchSelect"
import KtButton from "@/views/Core/KtButton"
import TableColumnFilterDialog from "@/views/Core/TableColumnFilterDialog"
import { format } from "@/utils/datetime"
import { getLodop } from "@/utils/LodopFuncs"
import { export_json_to_excel } from "@/excel/Export2Excel"

export default {
  components: {
    PopupTreeInput,
    KtTable2,
    KtButton,
    TableColumnFilterDialog,
    SearchSelect
  },
  data () {
    return {
      size: 'small',
      filters: {
        batchNo: ''
      },
      dataForm: {
        id: 0
    
      },
      dicts:this.$store.state.dict.dicts,
      columns: [],
      filterColumns: [],
      pageRequest: {},
      pageResult: {},
      componentKey: 0,
   
      myButtons:[{
				name:"handleEdit",
				perms:"core:CheckOut:edit",
				label:"action.edit",
				icon:"fa fa-edit"
			}],
      dialogVisible1: false, // 新增编辑界面是否显示
      editLoading: false,
      dicts: this.$store.state.dict.dicts,
      deptData: [],
      deptTreeProps: {
        label: 'name',
        children: 'children'
      },
      roles: [],
      gysTypes: []
    }
  },
  computed: {

  },
  methods: {
    // 获取分页数据
    itemclick:function(data){
      //debugger
      if (data.length!=0){
        this.filters.fromCorpName=data.name
      }else{
        this.filters.fromCorpName=""
      }
    },
    findPage:function (data) {
      if (data !== null) {
        this.filters.pageNum = data.pageRequest.pageNum
        this.filters.pageSize = data.pageRequest.pageSize
      }
      this.$api.receiptIn.FindFlatReportPage(this.filters).then((res) => {    
        this.pageResult = res.data
      }).then(data != null ? data.callback : '')
    },
    LODOPL: function () {
                    var LODOP = getLodop();
                        return LODOP;
                        //layer.msg("请下载Lodop插件", { icon: 5 });
    },
    //导出的方法
		exportExcel() {
        require.ensure([], () => {	
          this.$api.receiptIn.GetExportList(this.filters).then((res) => {			
          const tHeader = ['单号', '内部批次号', '物料名称','完成数量','单位', '创建时间', '完成时间'];
          const filterVal = ['receiptNo', 'wmsBanchNo', 'itemName','finshCount','packUnit','beginTime', 'finishTime'];				
          const list = res.data;    
          const data = this.formatJson(filterVal, list);
          export_json_to_excel(tHeader, data, '入库单导出');
          })
        })
      },
    formatJson(filterVal, tableData) {
			return tableData.map(v => {
				return filterVal.map(j => {
						return v[j]
					})
				}
			)
		},
    selectionFormat: function (row, column, cellValue, index) {
      let key = ""
      let propt = column.property;
      let val = row[column.property];
      let dict = this.gysTypes;
      for (let i = 0; i < dict.length; i++) {
        if (dict[i].name == val) {
          return dict[i].name;
        }
      }
      return row[column.property]
    }, 
    findgysTypes: function () {
      this.$api.corewhgro.findPage().then((res) => {
        this.gysTypes = res.data.content
      })
    },
    
    // 显示编辑界面
		handleEdit: function (params) {
			this.dialogVisible1 = true
		
			this.dataForm = Object.assign({}, params.row)
			 
		},
    // 时间格式化
    dateFormat: function (row, column, cellValue, index) {
      return format(row[column.property])
    },
    //新增
    submitForm: function () {
      this.$refs.dataForm.validate((valid) => {
       
        if (valid) {
         
          this.$confirm(this.getKey('action.isConfirm'), this.getKey('action.tips'), {}).then(() => {
         
            this.editLoading = true
            let params = Object.assign({}, this.dataForm)
            this.$api.receiptIn.submitFlatIn(params).then((res) => {
              //this.editLoading = false
              if (res.code == 200) {
                this.$message({ message: this.getKey('action.operateSucess'), type: 'success' })
                this.dialogVisible = false
                this.$refs['dataForm'].resetFields()
              } else {
                this.$message({ message: this.getKey('action.operateFail') + res.msg, type: 'error' })
              }
              this.findPage(null)
            })
          })
        }
      })
    },
     getKey: function (arg) {
      return this.$t(arg)
    },
    //字典
    selectionFormat: function (row, column, cellValue, index) {
      let key = ""
      let propt = column.property;
      if (propt == "stn") {
        key = "stnOut"
      } else if (propt == "inType") {
        key = "inType"
      } else if (propt == "status") {
        key = "status"
      }

      let val = row[column.property];
      let dict = this.$store.state.dict.dicts[key];
      if (dict == undefined) {
        return row[column.property]
      }
      for (let i = 0; i < dict.length; i++) {
        if (dict[i].value == val) {
          return dict[i].label;
        }
      }  

      return row[column.property]
    },
    // 处理表格列过滤显示
    displayFilterColumnsDialog: function () {
      this.$refs.tableColumnFilterDialog.setDialogVisible(true)
    },
    // 处理表格列过滤显示
    handleFilterColumns: function (data) {
      this.filterColumns = data.filterColumns
      this.$refs.tableColumnFilterDialog.setDialogVisible(false)
    }
  },
  created () {
    this.findgysTypes()

  },
  mounted () {
    this.columns = [
      { prop: "receiptNo", label: "入库单号", minWidth: 120 },
      { prop: "itemName", label: "物料名称", minWidth: 120 },
      { prop: "finshCount", label: "完成数量", minWidth: 120 },
      { prop: "packUnit", label: "单位", minWidth: 120 },    
      { prop: "fromCorpBatchNo", label: "供应商批号", minWidth: 120 },
      { prop: "wmsBanchNo", label: "内部批号", minWidth: 100 },
       { prop: "areaName", label: "入库库区", minWidth: 100, formatter: this.selectionFormat },
      //{ prop: "stn", label: "field.stn", minWidth: 100, formatter: this.selectionFormat },
      { prop: "inType", label: "入库类型", minWidth: 100, formatter: this.selectionFormat },
      { prop: "fromCorpName", label: "供应商名称", minWidth: 70, minWidth: 120, formatter: this.selectionFormat },
      { prop: "status", label: "状态", minWidth: 120, formatter: this.selectionFormat },
      //{ prop: "fromCorpId", label: "供应商主键", minWidth: 120},
      { prop: "beginTime", label: "beginTime", minWidth: 140, formatter: this.dateFormat },
      { prop: "finshTime", label: "finshTime", minWidth: 140, formatter: this.dateFormat }

    ]
    this.filterColumns = this.columns;
  }
}
</script>

<style scoped>
</style>