using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using GK.WCS.Common;
using GK.WCS.Common.task;
using GK.WCS.Crane;
using GK.WCS.Crane.enumerate;
using GK.WCS.DAL;
using GK.WCS.Entity;
using GK.WMS.DAL;

namespace GK.WCS.Crane
{
    //输送线
    public abstract class CraneSynchroDYG : CraneSynchro
    {

        CraneConnect craneConnect = null;
        ITaskCraneServer taskCraneServer= ServerFactray.getServer<ITaskCraneServer>();
        ITaskServer taskServer=WMSDalFactray.getDal<ITaskServer>();
        private GkDYGCraneStatus _hisStatus = null;
        public CraneSynchroDYG(int craneId) : base(craneId)
        {

        }
        protected override void onlyOneTime()
        {
            craneConnect = (CraneConnect)TaskPool.get<CraneConnect>(CraneId);
            time = 400;
        }


        public override void excute()
        {
            GkDYGCraneStatus cs = new GkDYGCraneStatus();
            cs.stnId= CraneId;
            byte[] craneState= craneConnect.reader(500, 0, 40);
            cs.GetDYGCraneStatus(craneState);
            if (cs.getStatus(StatusKey.CRANE异常) == 1)
            {
                cs.setFault();
                cs.GetError();
            }
            else
            {
                cs.clearError();
            }
            if (cs.finishFlag == 1)
            {
                craneExcute(cs);
            }
            else if(cs.finishFlag == 0)
            {
                runningExcute(cs);
            }
            craneStatus = cs;
            _hisStatus = cs;
        }
        protected void craneExcute(GkDYGCraneStatus status)
        {
            try
            {
                if (_hisStatus == null)
                {
                    update(status);
                }
                else
            if (_hisStatus.finishTaskNo != status.finishTaskNo)
                {
                    update(status);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        void update(GkDYGCraneStatus status)
        {
            craneConnect.writeInt(541, 24, 1);
            for(int i = 0; i <= 2; i++)
            {
                Thread.Sleep(50);
                if (Tools.ushort16(craneConnect.reader(541, 22, 2), 0) == 0)
                {
                    craneConnect.writeInt(541, 24, 0);
                }
            }
          
            ITaskCraneServer taskCraneServer = ServerFactray.getServer<ITaskCraneServer>();
            int taskNo = status.finishTaskNo;      
            int upStatus = 9;
            TaskCrane taskCrane=taskCraneServer.GetItem(taskNo);
            if (taskCrane.taskType == 2)
            {
                taskServer.updateTaskStatus(taskCrane.completeId,3);
            }
            //状态已经更新过了，防止系统重启导致的多次更新。
            if (taskCraneServer.IsTaskFinished(taskNo, upStatus))
            {
                LoggerCommon.fileAll(taskNo + "状态以完成:" + upStatus);
                return;
            }
            var res = taskCraneServer.UpdateTaskStatus(taskNo, upStatus, 1);
            
        }

        protected void runningExcute(GkDYGCraneStatus status)
        {
            try
            {
                if (_hisStatus == null)
                {
                    updateRunning(status);
                }
                else
            if (_hisStatus.finishTaskNo != status.finishTaskNo)
                {
                    updateRunning(status);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
        void updateRunning(GkDYGCraneStatus status)
        {

            ITaskCraneServer taskCraneServer = ServerFactray.getServer<ITaskCraneServer>();
            int taskNo = status.finishTaskNo;
            short upStatus = 2;

            //状态已经更新过了，防止系统重启导致的多次更新。
            if (taskCraneServer.IsTaskFinished(taskNo, upStatus))
            {
                LoggerCommon.fileAll(taskNo + "状态以完成:" + upStatus);
                return;
            }
            var res = taskCraneServer.UpdateTaskStatus(taskNo, upStatus, 1);

        }



    }
}
