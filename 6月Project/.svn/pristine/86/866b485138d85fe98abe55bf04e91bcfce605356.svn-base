using GK.WCS.Common;
using GK.WCS.Crane.enumerate;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GK.WCS.Crane
{
    
    public class GkCraneStatus : GkCraneStatusBase
    {
     
        ushort mw10;
        ushort mw12;
        ushort mw14;
        ushort mw16;
        List<ErrorKey> list = new List<ErrorKey>();
        ushort mw85;
        ushort mw87;
        ushort mw89;
        ushort mw91;
        ushort mw93;
        public int walkNowValue;//走行现在值
        public int liftNowValue;//升降现在值
        public int craneState;//堆垛机状态
        public int craneMode;//堆垛机模式
        public int sendData13;//发送数据_13
        public int walkActualPosition;//走行实际位置
        public int liftActualPosition;//升降实际位置
        public int sendData16;//发送数据_16
        public int sendData17;//发送数据_17
        public int finishFlag;//完成标志
        public int finishTaskNo;//完成任务号
        public override void parseStatus(byte[] b)
        {
          
            mw10 = Tools.ushort16(b, 0);
            mw12 = Tools.ushort16(b, 2);
            mw14 = Tools.ushort16(b, 4);
            mw16 = Tools.ushort16(b, 8);
            mw85 = Tools.ushort16(b, 8);
            mw87 = Tools.ushort16(b, 10);
            mw89 = Tools.ushort16(b, 14);
            mw91 = Tools.ushort16(b, 18);
            mw93 = Tools.ushort16(b, 20);
            GkCraneError();
            walkNowValue = Tools.ushort16(b, 12);
            liftNowValue= Tools.ushort16(b, 16);
            craneState = Tools.ushort16(b, 22);
            craneMode = Tools.ushort16(b, 24);
            sendData13 = Tools.ushort16(b, 26);
            walkActualPosition = Tools.ushort16(b, 28);
            liftActualPosition = Tools.ushort16(b, 30);
            sendData16 = Tools.ushort16(b, 32);
            sendData17 = Tools.ushort16(b, 34);
            finishFlag = Tools.ushort16(b, 36);
            finishTaskNo = Tools.ushort16(b, 38);
            lastTime = DateTime.Now.Ticks;

        }

        public int getStatus(StatusKey key)
        {
            int index = (int)key;
            int mw = index / 16;
            int bit = index % 16;
            int begin = 1;
            begin = begin << bit;
            int val = 0;
            if (mw == 0)
            {
                val = mw10 & begin;
            }
            else if (mw == 1)
            {
                val = mw12 & begin;
            }
            else if (mw == 2)
            {
                val = mw14 & begin;
            }
            else if (mw == 3)
            {
                val = mw16 & begin;
            }
            if (val > 0)
            {
                return 1;
            }

            return 0;
        }

        public void GkCraneError()
        {


            foreach (ErrorKey key in Enum.GetValues(typeof(ErrorKey)))
            {
                int index = (int)key;
                int mw = index / 16;
                int bit = index % 16;
                int begin = 1;
                begin = begin << bit;
                int val = 0;
                if (mw == 0)
                {
                    val = mw85 & begin;
                }
                else if (mw == 1)
                {
                    val = mw87 & begin;
                }
                else if (mw == 2)
                {
                    val = mw89 & begin;
                }
                else if (mw == 3)
                {
                    val = mw91 & begin;
                }
                else if (mw == 4)
                {
                    val = mw93 & begin;
                }
                if (val > 0)
                {
                    list.Add(key);
                }
            }

        }

        public override bool checkCrane()
        {
            throw new NotImplementedException();
        }

        public override int getX()
        {
            throw new NotImplementedException();
        }

        public override int getY()
        {
            throw new NotImplementedException();
        }

        public override int getZ()
        {
            throw new NotImplementedException();
        }
        public override List<string> getError()
        {
            throw new NotImplementedException();
        }

        public override void parseError(byte[] b)
        {
            throw new NotImplementedException();
        }

       
    }

    
}
