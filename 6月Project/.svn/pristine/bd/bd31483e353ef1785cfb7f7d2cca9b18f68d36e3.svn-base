using Dapper;
using GK.WMS.DAL;
using GK.WMS.Entity;
using GK.WMS.Entity.wms;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Management.Instrumentation;
using System.Text;

namespace GK.Engine.WMS.wms
{
    public class CommentFunction
    {
        static ISequenceIdServer sequenceIdServer = WMSDalFactray.getDal<ISequenceIdServer>();
        /// <summary>
        /// 任务主表添加
        /// </summary>
        /// <param name="Connection"></param>
        /// <param name="transaction"></param>
        /// <returns></returns>
        public static long InsertTask(IDbConnection Connection, IDbTransaction transaction, CoreStockParam p, int status, int bussType, int taskType)
        {
            CoreTask task = new CoreTask();
            task.id = sequenceIdServer.getId();
            task.stockId = p.id;
            task.status = status;//1新建状态 2待下发wcs 3下发完成 4执行完成
            task.createTime = sequenceIdServer.GetTime();
            task.bussType = bussType; //出库类型 出库,入库相关类型
            task.taskType = taskType; //任务类型 1入库任务 2出库任务 3移库任务 4渡库任务
            return Connection.InsertNoNull<CoreTask>(task, transaction);
        }

        /// <summary>
        /// 任务子表添加
        /// </summary>
        /// <param name="Connection">连接对象</param>
        /// <param name="transaction">事务对象</param>
        /// <param name="stockDetailId">货位库存明细主键</param>
        /// <returns></returns>
        //public static long InsertTaskDetail(IDbConnection Connection, IDbTransaction transaction, long stockDetailId)
        //{
        //    //任务明细添加
        //    CoreTaskParam param = new CoreTaskParam();
        //    param.id = sequenceIdServer.getId();
        //    param.detailId = stockDetailId;
        //    param.wmsTaskId = param.id - 1; //task.id
        //    param.status = 1;//新建状态
        //    param.createTime = sequenceIdServer.GetTime();
        //    return Connection.InsertNoNull<CoreTaskParam>(param, transaction);
        //}

        /// <summary>
        /// 盘点明细表添加
        /// </summary>
        /// <param name="Connection">连接对象</param>
        /// <param name="transaction">事务对象</param>
        /// <param name="stockDetailId">货位库存明细主键</param>
        /// <param name="receptId">盘点单主表主键</param>
        /// <returns></returns>
        public static long InsertPkDetail(IDbConnection Connection, IDbTransaction transaction, CoreStockParam param, long receptId)
        {
            //任务明细添加
            WhReceiptPkDetail receiptPkdetail = new WhReceiptPkDetail();
            receiptPkdetail.id = sequenceIdServer.getId();
            receiptPkdetail.receptId = receptId;
            receiptPkdetail.stockDetailId = param.stockDetailId;
            receiptPkdetail.barCode = param.barCode;
            return Connection.InsertNoNull<WhReceiptPkDetail>(receiptPkdetail, transaction);
        }
        /// <summary>
        /// 库位库存修改库存状态,盘库状态
        /// </summary>
        /// <param name="Connection"></param>
        /// <param name="transaction"></param>
        /// <param name="stockId">库存主键</param>
        /// <param name="status">0库外 1入库中 2库存 3出库中</param>
        /// <param name="pkStatus">0 未盘库 1 盘库中</param>
        /// <returns></returns>
        public static bool UpdateStock(IDbConnection Connection, IDbTransaction transaction, long stockId, int status, int pkStatus)
        {
            CoreStock model = new CoreStock();
            model.id = stockId;
            model.status = status;
            model.pkStatus = pkStatus;
            return Connection.updateNotNull<CoreStock>(model, transaction);
        }
        /// <summary>
        /// 库位库存修改库存状态
        /// </summary>
        /// <param name="Connection"></param>
        /// <param name="transaction"></param>
        /// <param name="stockId">库存主键</param>
        /// <param name="status">0库外 1入库中 2库存 3出库中</param>
        /// <returns></returns>
        public static bool UpdateStock(IDbConnection Connection, IDbTransaction transaction, long stockId, int status)
        {
            CoreStock model = new CoreStock();
            model.id = stockId;
            model.status = status;
            return Connection.updateNotNull<CoreStock>(model, transaction);
        }
        /// <summary>
        /// 库位明细库存中修改库存状态,盘库状态
        /// </summary>
        /// <param name="Connection"></param>
        /// <param name="transaction"></param>
        /// <param name="stockDetailId">库存明细主键</param>
        /// <param name="pkStatus">0 未盘库 1 盘库中</param>
        /// <param name="stockStatus">0库外 1入库中 2库存 3出库中</param>
        /// <returns></returns>
        public static bool UpdateStockDetail(IDbConnection Connection, IDbTransaction transaction, long stockDetailId, int pkStatus, int stockStatus)
        {
            CoreStockDetail model = new CoreStockDetail();
            model.id = stockDetailId;
            model.pkStatus = pkStatus;
            model.stockStatus = stockStatus;
            return Connection.updateNotNull<CoreStockDetail>(model, transaction);
        }

        /// <summary>
        /// 库位明细库存中修改库存状态
        /// </summary>
        /// <param name="Connection"></param>
        /// <param name="transaction"></param>
        /// <param name="stockDetailId">库存明细主键</param>
        /// <param name="stockStatus">0库外 1入库中 2库存 3出库中</param>
        /// <returns></returns>
        public static bool UpdateStockDetail(IDbConnection Connection, IDbTransaction transaction, long stockDetailId, int stockStatus)
        {
            CoreStockDetail model = new CoreStockDetail();
            model.id = stockDetailId;
            model.stockStatus = stockStatus;
            return Connection.updateNotNull<CoreStockDetail>(model, transaction);
        }
    }
}
