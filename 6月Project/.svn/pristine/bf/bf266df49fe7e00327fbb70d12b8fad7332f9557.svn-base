
using GK.Common;
using GK.Common.dto;
using GK.WMS.DAL;
using GK.WMS.Entity;
using GK.WMS.Entity.dto;
using GK.WMS.Entity.wms;
using HY.WCS.DAL.dto;
using System.Collections.Generic;
using System.Web.Http;
using Web.Authorize;

namespace WebApi
{
    [FormAuthenticationFilter]

    [RoutePrefix("receiptIn")]
    public class ReceiptInController : BaseApiController
    {
        IReceiptInServer receipt = WMSDalFactray.getDal<IReceiptInServer>();
        ISequenceIdServer sequenceIdServer = WMSDalFactray.getDal<ISequenceIdServer>();
        IItemServer iitemServer = WMSDalFactray.getDal<IItemServer>();
        [HttpPost, Route("FindPage")]
        public BaseResult FindPage([FromBody]ReceiptinDto dto)
        {
            Page<WhReceiptIn> info = receipt.QueryReceiptInPage(dto);
            return BaseResult.Ok(info);
        }

        [HttpPost, Route("batchDelete")]
        public BaseResult batchDelete([FromBody]List<WhReceiptIn> list)
        {
           
            foreach (WhReceiptIn receiptIn in list)
            {
               List<WhReceiptIn> InList= receipt.getReceiptIn(receiptIn.id);
                if (InList[0].status==1) {
                    receipt.delete<WhReceiptIn>(receiptIn.id);
                    receipt.deleteInDetail(receiptIn.id);
                }
                else
                {
                    return BaseResult.Error(500, "入库单"+ receiptIn.id+"非新建无法删除");
                }
                
            }

            return BaseResult.Ok("ok");
        }



        [HttpPost, Route("Save")]
        public BaseResult Save([FromBody]WhReceiptIn receiptIn)
        {
            if (receiptIn.id == 0)
            {
                receiptIn.id = sequenceIdServer.getId();
                receiptIn.beginTime = sequenceIdServer.GetTime();
                receiptIn.finshTime = sequenceIdServer.GetTime();
                receiptIn.status = 1;
                //receiptIn.wmsBanchNo = sequenceIdServer.getId().ToString();
                receipt.insertNotNull(receiptIn);
                return BaseResult.Ok(receiptIn.id);
            }
            else
            {
                receiptIn.status = 1;
                return BaseResult.Ok(receipt.update(receiptIn));
            }
        }
        [HttpPost, Route("getDetials")]
        public BaseResult getDetials([FromBody]WhReceiptIn dto)
        {
            List<WhReceiptInDetail> info = receipt.getDetials(dto.id);
            return BaseResult.Ok(info);
        }

        [HttpPost, Route("saveDetials")]
        public BaseResult saveDetials([FromBody]ReceiptInAddDto dto)
        {
            WhReceiptIn receiptIn = receipt.getById<WhReceiptIn>(dto.id);
            string[] ids = dto.items.Split(',');
            foreach (string id in ids)
            {
                WhReceiptInDetail detail = new WhReceiptInDetail();
                CoreItem coreitem = iitemServer.FindCoreItemById(long.Parse(id));
                detail.id = sequenceIdServer.getId();
                detail.itemId = long.Parse(id);
                detail.receiptId = receiptIn.id;
                detail.stn = receiptIn.stn;
                detail.planCount = 0;
                detail.packageSpec = "";
                detail.packUnit = "";
                //detail.wmsBanchNo = receiptIn.wmsBanchNo;
                detail.activeCount = 0;
                detail.finshCount = 0;
                detail.itemName = coreitem.name;
                detail.createTime = sequenceIdServer.GetTime();
                //detail.FromCorpName = receiptIn.FromCorpName;
                //detail.FromCorpBatchNo = receiptIn.FromCorpBatchNo;
                receipt.insertNotNull(detail);
            }
            return BaseResult.Ok("ok");
        }

        [HttpPost, Route("saveDetialByOrder")]
        public BaseResult saveDetialByOrder([FromBody]ReceiptAddDto dto)
        {
            WhReceiptIn receiptIn = receipt.getById<WhReceiptIn>(dto.id);
            //List<WhSoOutParam> list = whSoOutServer.GetWhSoOutList(dto.items);
            //foreach (var item in list)
            //{
            //    WhReceiptOutDetail detail = new WhReceiptOutDetail();
            //    detail.id = sequenceIdServer.getId();
            //    detail.itemId = item.itemId;
            //    detail.soDetailId = item.id;
            //    detail.receptId = dto.id;
            //    detail.stn = receiptOut.stn;
            //    detail.planCount = 0;
            //    receiptOutServer.insert(detail);
            //}
            string[] ids = dto.items.Split(',');
            //订单和仓库关系表的添加
            //foreach (var id in ids)
            //{
            //    WhSoOutReceipt soOutReceipt = new WhSoOutReceipt();
            //    soOutReceipt.id = sequenceIdServer.getId();
            //    soOutReceipt.whReceiptId = dto.id;
            //    soOutReceipt.soid = long.Parse(id);
            //    receiptOutServer.insert(soOutReceipt);
            //}


            return BaseResult.Ok("ok");
        }

        [HttpPost, Route("updateDetials")]
        public BaseResult updateDetials([FromBody]WhReceiptInDetail dto)
        {
            receipt.updateNotNull(dto);
            return BaseResult.Ok("ok");
        }


        [HttpPost, Route("deleteDetial")]
        public BaseResult deleteDetial([FromBody]string id)
        {
            receipt.delete<WhReceiptInDetail>(long.Parse(id));
            return BaseResult.Ok("ok");
        }

        //开始任务
        [HttpPost, Route("begin")]
        public BaseResult begin([FromBody]WhReceiptIn dto)
        {
            int sum = 0;
            List<WhReceiptInDetail> detailList = receipt.getDetials(dto.id);
            for (int i=0;i< detailList.Count;i++) {
                if (detailList[i].wmsBanchNo == null || detailList[i].wmsBanchNo == "0"|| detailList[i].wmsBanchNo=="") {
                    sum += 1;
                }
            }
            if (sum > 0)
            {
                return BaseResult.Error(500, "入库单" + dto.id + "没有内部批号无法开始任务");
            }
            else
            {
                receipt.updateBegin(dto.id);
                return BaseResult.Ok("ok");
            }
        }
        //完成任务
        [HttpPost, Route("finsh")]
        public BaseResult finsh([FromBody]WhReceiptIn dto)
        {
            receipt.updateFinsh(dto.id);
            return BaseResult.Ok("ok");
        }
        //根据供应商获取物料列表
        [HttpPost, Route("FindPageItem")]
        public BaseResult FindPageItem([FromBody]CoreCorpItemDto dto)
        {
            Page<CoreItem> info = receipt.QueryCoreItemPage(dto);
            return BaseResult.Ok(info);
        }


    }
}