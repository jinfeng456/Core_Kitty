using GK.Mongon.DAL;
using GK.Mongon.entity;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Net.Http;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Web.Http.Filters;
using System.Web.Security;
namespace WebApi.filter {
   public class LoggerFilter:ActionFilterAttribute {


        private const string Key = "action";
        static List<String> list = new List<String>();
        static LoggerFilter() {
           
            list.Add("^/api/menu/getMenu");
            list.Add("^/api/\\S+/page[^/]+$");
            list.Add("^/api/logger");

        }




        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext) {

            // actionContext.ActionArguments;
            HttpRequest request = HttpContext.Current.Request;
            String ip = GetClientIp();
            String url = request.Path;

            foreach(String l in list) {
         
                if(Regex.IsMatch(url,l)) {
                    return;
                }
            }
            String info = null;
            if(actionExecutedContext.Response == null) {
                info = actionExecutedContext.Exception.StackTrace;
            } else {
                info = actionExecutedContext.Response.Content.ReadAsStringAsync().Result;
            }


            LoggerDto log = new LoggerDto();
            log.urlName = url;
            log.param = getParam( request, actionExecutedContext);
            log.result = info;
            log.ip = ip;
            WmslogUtil.save(log);

        }




        private String getParam(HttpRequest request,HttpActionExecutedContext actionExecutedContext) {
            String query = request.QueryString.ToString();
            String userid = "";
            GenericPrincipal principal = HttpContext.Current.User as GenericPrincipal;
            if(principal != null) {
                FormsIdentity identity = (FormsIdentity)principal.Identity;
                FormsAuthenticationTicket ticket = identity.Ticket;
                userid = ticket.UserData;
            }
            StringBuilder builder = new StringBuilder(userid + ":" + query);
            IDictionary<string,object> dic = actionExecutedContext.ActionContext.RequestContext.RouteData.Values;
            foreach(var item in dic) {
                builder.AppendFormat("&{0}={1}",item.Key,item.Value);
            }
            NameValueCollection names = request.Form;

            foreach(String name in names) {
                if(name == "password") {
                    continue;
                }
                builder.AppendFormat("&{0}={1}",name,HttpContext.Current.Request[name]);
            }
            String param = builder.ToString();
            return param;

        }
        private string GetClientIp() {
            string result = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if(string.IsNullOrEmpty(result)) {
                result = HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];
            }
            if(string.IsNullOrEmpty(result)) {
                result = HttpContext.Current.Request.UserHostAddress;
            }
            if(string.IsNullOrEmpty(result)) {
                return "0.0.0.0";
            }
            return result;
        }
    }
}
