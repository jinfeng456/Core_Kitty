using System;
using GK.WCS.Common.task;
using GK.WCS.Carrier;
using GK.WCS.Scan;
using GK.WCS.Common.core.dto;
using GK.WCS.Common;
using GK.WCS.DAL;
using GK.WCS.Entity;
using GK.WCS.Carrier.dto;
using log4net.Repository.Hierarchy;
using System.Collections.Generic;

namespace GK.WCS.Controller {
    public class CarrierAllocateJobTask1 : CarrierAllocateJobTask {

        ITaskCarrierServer taskCarrierServer = ServerFactray.getServer<ITaskCarrierServer>();
        CarrierSynchro carrierSynchro;
        List<int> inPoint=new List<int>();
        List<int> outPoint=new List<int>();
        protected override void onlyOneTime() {
           
            carrierSynchro = (CarrierSynchro)TaskPool.get<CarrierSynchro>(1);
        }
        public override void excute() {   
            inPointAssign();
            inPointApply(inPoint);
            OutPointAssign();
            outPointApply(outPoint);
        }
        public void inPointApply(List<int> inPoint)
        {
            short begin;
            int codeMessage=1;
            foreach (int point in inPoint)
            {
                if (point == 1001)
                {
                    CarrierSignalStatus carrierSignal = carrierSynchro.getSignalStatut(1001);
                    int dir = connect.getCarrierDir(4);
                    if (carrierSignal.plcMode != 4)
                    {
                        LoggerCommon.fileAll("PLC不是自动状态！");
                        continue;
                    }
                    if (carrierSignal.plcState != 1)
                    {
                        LoggerCommon.fileAll("PLC没有启动完成！");
                        continue;
                    }
                    if (carrierSignal.arriveApply == 1)
                    {
                        if (dir == 1)
                        {
                            codeMessage = carrierSignal.code;
                            //从wms获取wcs任务和托盘仓位******************************************
                            TaskCarrier taskCarrier = taskCarrierServer.getByCode(codeMessage.ToString());
                            sendCrarrer(1, taskCarrier, 0);

                        }
                        else

                        {
                            LoggerCommon.fileAll("1层输送线是出库模式！");
                        }
                    }

                }
                else if (point == 1007)
                {
                    CarrierSignalStatus carrierSignal = carrierSynchro.getSignalStatut(1007);
                    int dir = connect.getCarrierDir(4);
                    if (carrierSignal.plcMode != 4)
                    {
                        LoggerCommon.fileAll("PLC不是自动状态！");
                        continue;
                    }
                    if (carrierSignal.plcState != 1)
                    {
                        LoggerCommon.fileAll("PLC没有启动完成！");
                        continue;
                    }
                    if (carrierSignal.arriveApply == 1)
                    {
                        if (dir == 1)
                        {
                            codeMessage = carrierSignal.code;
                            //从wms获取wcs任务和托盘仓位******************************************
                            TaskCarrier taskCarrier = taskCarrierServer.getByCode(codeMessage.ToString());
                            sendCrarrer(1, taskCarrier, 32);

                        }
                        else

                        {
                            LoggerCommon.fileAll("1层输送线是出库模式！");
                        }
                    }

            }
                else if (point == 1015)
                {
                    CarrierSignalStatus carrierSignal = carrierSynchro.getSignalStatut(1015);
                    int dir = connect.getCarrierDir(6);
                    if (carrierSignal.plcMode != 4)
                    {
                        LoggerCommon.fileAll("PLC不是自动状态！");
                        continue;
                    }
                    if (carrierSignal.plcState != 1)
                    {
                        LoggerCommon.fileAll("PLC没有启动完成！");
                        continue;
                    }
                    if (carrierSignal.arriveApply == 1)
                    {
                        if (dir == 1)
                        {
                            codeMessage = carrierSignal.code;
                            //从wms获取wcs任务和托盘仓位******************************************
                            TaskCarrier taskCarrier = taskCarrierServer.getByCode(codeMessage.ToString());
                            sendCrarrer(1, taskCarrier,56);

                        }
                        else

                        {
                            LoggerCommon.fileAll("2层输送线是出库模式！");
                        }
                    }
        } 
            }
        }
        public void outPointApply(List<int> inPoint)
        {
   
            foreach (int point in inPoint)
            {
                if (point == 1011)
                {
                    TaskCarrier taskCarrier= taskCarrierServer.getCarrierTask(1011,1011);
                    if (taskCarrier== null)
                    {
                        continue;
                    }
                    CarrierSignalStatus carrierSignal = carrierSynchro.getSignalStatut(1011);
                    if (carrierSignal.plcMode != 4)
                    {
                        LoggerCommon.fileAll("PLC不是自动状态！");
                        continue;
                    }
                    if (carrierSignal.plcState != 1)
                    {
                        LoggerCommon.fileAll("PLC没有启动完成！");
                        continue;
                    }
                        sendCrarrer(1, taskCarrier,80);
                }
                else if (point == 1012)
                {
                    TaskCarrier taskCarrier = taskCarrierServer.getCarrierTask(1012, 1012);
                    if (taskCarrier == null)
                    {
                        continue;
                    }
                    CarrierSignalStatus carrierSignal = carrierSynchro.getSignalStatut(1012);
                    if (carrierSignal.plcMode != 4)
                    {
                        LoggerCommon.fileAll("PLC不是自动状态！");
                        continue;
                    }
                    if (carrierSignal.plcState != 1)
                    {
                        LoggerCommon.fileAll("PLC没有启动完成！");
                        continue;
                    }
                    sendCrarrer(1, taskCarrier,104);
                }
                else if (point == 1023)
                {
                    TaskCarrier taskCarrier = taskCarrierServer.getCarrierTask(1023, 1023);
                    if (taskCarrier == null)
                    {
                        continue;
                    }
                    CarrierSignalStatus carrierSignal = carrierSynchro.getSignalStatut(1023);
                    if (carrierSignal.plcMode != 4)
                    {
                        LoggerCommon.fileAll("PLC不是自动状态！");
                        continue;
                    }
                    if (carrierSignal.plcState != 1)
                    {
                        LoggerCommon.fileAll("PLC没有启动完成！");
                        continue;
                    }
                    sendCrarrer(1, taskCarrier, 128);
                }
                else if (point == 1024)
                {
                    TaskCarrier taskCarrier = taskCarrierServer.getCarrierTask(1024, 1024);
                    if (taskCarrier == null)
                    {
                        continue;
                    }
                    CarrierSignalStatus carrierSignal = carrierSynchro.getSignalStatut(1024);
                    if (carrierSignal.plcMode != 4)
                    {
                        LoggerCommon.fileAll("PLC不是自动状态！");
                        continue;
                    }
                    if (carrierSignal.plcState != 1)
                    {
                        LoggerCommon.fileAll("PLC没有启动完成！");
                        continue;
                    }
                    sendCrarrer(1, taskCarrier, 152);
                }

            }
        }


        public void inPointAssign()
        {
            inPoint.Add(1001);
            inPoint.Add(1007);
            inPoint.Add(1015);

        }
        public void OutPointAssign()
        {
            outPoint.Add(1023);
            outPoint.Add(1024);
            outPoint.Add(1011);
            outPoint.Add(1012);
        }
       

    }
        } 
