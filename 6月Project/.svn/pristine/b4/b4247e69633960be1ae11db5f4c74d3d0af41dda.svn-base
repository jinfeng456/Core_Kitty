using Dapper;
using GK.Common.dto;
using GK.DAL.inter;
using GK.WMS.DAL.abs;
using GK.WMS.Entity;
using GK.WMS.Entity.wms;
using HY.WCS.DAL.dto;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace GK.WMS.DAL
{
    public abstract class AbCoreSupplierServer : AbsWMSBaseServer, ICoreSupplierServer
    {
        ISequenceIdServer sequenceIdServer = WMSDalFactray.getDal<ISequenceIdServer>();
        #region 供应商信息
        //添加
        public long AddSupplier(CoreSupplierCorp model)
        {
            model.id = sequenceIdServer.getId();
            if (model.editable == "可编辑")
            {
                model.editable = "0";
            }
            else if (model.editable == "不可编辑")
            {
                model.editable = "1";
            }
            return Connection.Insert<CoreSupplierCorp>(model);
        }
        //修改
        public bool UpdateSupplier(CoreSupplierCorp model)
        {
            if (model.editable == "可编辑") {
                model.editable = "0";
            } else if (model.editable=="不可编辑") {
                model.editable = "1";
            }
            return Connection.Update<CoreSupplierCorp>(model);
        }
        //删除物料类别
        public int DeleteSupplier(List<CoreSupplierCorp> CoreSupplierCorpList)
        {
            foreach (var CoreSupplierCorp in CoreSupplierCorpList)
            {
                Connection.Delete<CoreSupplierCorp>("id=" + CoreSupplierCorp.id.ToString());
            }
            return 1;
        }
        //通过ID查找
        public CoreSupplierCorp FindSupplierById(long id)
        {
            return Connection.Get<CoreSupplierCorp>(id);
        }
        //分页显示
        public Page<CoreSupplierCorp> QuerySupplierPage(CoreSupplierCorpDto dto)
        {
            string sql = @"SELECT id,name,code,nc_id,
                           CASE editable
                           WHEN 0 THEN '可编辑'
                           ELSE '不可编辑'
                           END AS editable from
                           core_supplier_corp where 1=1";
            if (dto != null && !string.IsNullOrEmpty(dto.name))
            {
                dto.name = "%" + dto.name + "%";
                sql += " AND name like @name ";
            }
            if (dto != null && !string.IsNullOrEmpty(dto.editable))
            {
                if (dto.editable == "可编辑")
                {
                    dto.editable = "0";
                }
                else if (dto.editable == "不可编辑")
                {
                    dto.editable = "1";
                }
                sql += " AND editable = @editable ";
            }
            return this.queryPage<CoreSupplierCorp>(sql, "id", dto);
        }
        //批量设置物料类别库位信息
        public bool BatchSetItem(List<long> locList, long itemId)
        {
            CoreCorpItem coreCorpItem = new CoreCorpItem();           
                for (int i = 0; i < locList.Count(); i++)
                {
                long iid = locList[i];
                coreCorpItem.id = sequenceIdServer.getId();
                coreCorpItem.supplierId = iid;
                coreCorpItem.itemId = itemId;
                insertNotNull(coreCorpItem);                   
                }          
            return true;
        }
        #endregion

        #region 供应商物料绑定
        //添加
        public long AddCorpItem(CoreCorpItem model)
        {
            model.id = sequenceIdServer.getId();
            return Connection.Insert<CoreCorpItem>(model);
        }
        //修改
        public bool UpdateCorpItem(CoreCorpItem model)
        {           
            return Connection.Update<CoreCorpItem>(model);
        } 
        //删除供应商物料绑定
        public int DeleteCorpItem(List<CoreCorpItem> coreCorpItemList)
        {
            foreach (var coreCorpItem in coreCorpItemList)
            {
                Connection.Delete<CoreCorpItem>("id=" + coreCorpItem.id.ToString());
            }
            return 1;
        }      
        //分页显示
        public Page<CoreCorpItem> QueryCorpItemPage(CoreCorpItemDto dto)
        {
            string sql = @"select * from core_corp_item where 1=1";
            if (dto != null && dto.supplierId!=0)
            {
                sql += " AND supplier_Id=@supplierId ";
            }
            if (dto != null && dto.itemId != 0)
            {
                sql += " AND item_Id=@itemId ";
            }
            return this.queryPage<CoreCorpItem>(sql, "id", dto);
        }
        //根据供应商ID去查询是否绑定物料
        public List<CoreCorpItem> FindCorpItemById(long supplierId)
        {
            string sql = @"select * from core_Corp_Item where supplier_Id=@supplierId";
            List<CoreCorpItem> list = Connection.Query<CoreCorpItem>(sql, new { supplierId }).ToList();
            return list;
        }
        #endregion
    }
}
