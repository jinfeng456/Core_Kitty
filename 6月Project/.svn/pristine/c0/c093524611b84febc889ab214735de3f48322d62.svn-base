using Dapper;
using GK.Common.dto;
using GK.DAL.inter;
using GK.WMS.DAL.abs;
using GK.WMS.Entity;
using GK.WMS.Entity.dto;
using GK.WMS.Entity.wms;
using HY.WCS.DAL.dto;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;

namespace GK.WMS.DAL
{
    public abstract class AbsReceiptInServer : AbsWMSBaseServer, IReceiptInServer
    {
        ISequenceIdServer sequenceIdServer = WMSDalFactray.getDal<ISequenceIdServer>();
        #region 采购订单
        //根据采购订单ID获取明细
        public List<WhSoInDetail> GetOrderDetailId(WhSoIn warehouseIn)
        {
            WhSoInDetail warehouseInDetail = new WhSoInDetail();
            warehouseInDetail.soId = warehouseIn.id;
            long soId = warehouseIn.id;
            String sql = @"select * from wh_So_In_Detail where so_Id=@soId";
            List<WhSoInDetail> list1 = Connection.Query<WhSoInDetail>(sql, new { soId = soId }).ToList();
            return list1;
        }
        //采购订单分页
        public Page<WhSoIn> QueryOrderPage(WhSoInDto dto)
        {
            string sql = @"select id,so_No,src_So_Bill,gys_Name,create_Date,
                           finsh_Date,gys_Id,gys_Code, 
                           CASE Status
                           WHEN 1 THEN '执行中'
                           ELSE '完成'
                           END AS Status
                           from wh_So_In where 1=1";
            if (!string.IsNullOrEmpty(dto.vbillcode))
            {
                dto.vbillcode = "%" + dto.vbillcode + "%";
                sql += " AND so_No like @vbillcode";
            }
            if (!string.IsNullOrEmpty(dto.gysName))
            {
                dto.gysName = "%" + dto.gysName + "%";
                sql += " AND gys_Name like @gysName";
            }
            if (!string.IsNullOrEmpty(dto.status))
            {
                if (dto.status == "执行中")
                {
                    sql += " AND status=1";
                }
                else
                {
                    sql += " AND status=2";

                }
            }
            return this.queryPage<WhSoIn>(sql, "id", dto);
        }
        //添加入库单
        public long AddReceiptIn(WhReceiptIn whReceiptIn, WhSoIn warehouseIn)
        {
            whReceiptIn.id = sequenceIdServer.getId();
            whReceiptIn.receiptNo = warehouseIn.soNo;
            whReceiptIn.beginTime = DateTime.Now;
            whReceiptIn.finshTime = DateTime.Now;
            WhReceiptInDetail whReceiptInDetail = new WhReceiptInDetail();
            List<WhSoInDetail> list = this.GetOrderDetailId(warehouseIn);
            for (int i = 0; i < list.Count(); i++)
            {
                whReceiptInDetail.id = sequenceIdServer.getId();
                whReceiptInDetail.receptId = whReceiptIn.id;
                whReceiptInDetail.FromCorpName = whReceiptIn.FromCorpName;
                whReceiptInDetail.stn = whReceiptIn.stn;
                whReceiptInDetail.itemId = long.Parse(list[i].itemCode);
                whReceiptInDetail.wmsBanchNo = whReceiptIn.wmsBanchNo;
                whReceiptInDetail.FromCorpBatchNo = whReceiptIn.FromCorpBatchNo;
                whReceiptInDetail.packUnit = list[i].itemUnit;
                whReceiptInDetail.createTime = DateTime.Now;
                whReceiptInDetail.packageSpec = list[i].specification;
                whReceiptInDetail.planCount = list[i].count;
                whReceiptInDetail.activeCount = 0;
                whReceiptInDetail.finshCount = 0;
                whReceiptInDetail.itemName = list[i].itemName;
                whReceiptInDetail.soDetailId = list[i].id;
                whReceiptInDetail.soid = warehouseIn.id;
                Connection.InsertNoNull<WhReceiptInDetail>(whReceiptInDetail);
            }
            return Connection.InsertNoNull<WhReceiptIn>(whReceiptIn);
        }
        //根据订单主Id判断
        public List<WhSoInDetail> GetBillNo(string src_so_bill)
        {
            String sql = @"select * from wh_So_In where src_so_bill=@src_so_bill";
            List<WhSoInDetail> list1 = Connection.Query<WhSoInDetail>(sql, new { src_so_bill = src_so_bill }).ToList();
            return list1;
        }
        //根据订单子Id判断
        public List<WhSoInDetail> GetPkNo(string src_so_bill_detail)
        {
            String sql = @"select * from wh_So_In_Detail where src_so_bill_detail=@src_so_bill_detail";
            List<WhSoInDetail> list2 = Connection.Query<WhSoInDetail>(sql, new { src_so_bill_detail = src_so_bill_detail }).ToList();
            return list2;
        }
        #endregion

        #region 入库单
        public List<WhReceiptInDetail> getDetials(long receiptinId)
        {
            String sql = "select * from Wh_Receipt_in_Detail  where recept_id=@receiptinId";

            return Connection.Query<WhReceiptInDetail>(sql, new { receiptinId }).ToList();
        }


        //入库单分页
        public Page<WhReceiptIn> QueryReceiptInPage(ReceiptinDto dto)
        {
            string sql = " select * from Wh_Receipt_in  where 1=1 ";

            if (!String.IsNullOrEmpty(dto.wmsBanchNo))
            {
                dto.wmsBanchNo = "%" + dto.wmsBanchNo + "%";
                sql += "and wms_Banch_No like @wmsBanchNo";
            }
            string orderBy = "begin_Time  desc";
            return this.queryPage<WhReceiptIn>(sql, orderBy, dto);
        }

        //获取入库单所有明细
        public List<WhReceiptInDetail> getAllWorkingReceiptInDetail()
        {
            String sql = @"SELECT de.id,de.[item_Id] ,de.[wms_Banch_No] ,de.[From_Corp_Batch_No],de.[From_Corp_Name]
                           FROM  [Wh_Receipt_in_detail] de "
;
            List<WhReceiptInDetail> list = Connection.Query<WhReceiptInDetail>(sql).ToList();
            return list;
        }
        #endregion

    }
}
