using System;
using System.Collections.Generic;
using GK.WCS.Crane;
using GK.WCS.Common;

using GK.WCS.Common.task;
using CMNetLib.Robots.Crane;
using GK.WCS.Open.http.dto;
using GK.WCS.Common.Util;
using GK.WCS.Entity;
using GK.WCS.DAL;
using GK.DAL.inter;

namespace GK.WCS.Open.http.server {

    public class CraneServer:BaseServer {
        ///Crane/craneStates/0
        public CraneData craneStates( List<String> param) {
            int craneId = int.Parse(param[0]);
            CraneData data = new CraneData();
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
            if(connect == null) {
                return data;
            }
          
            RobotStatus status = CranePool.instance.get(craneId);
            if(status == null) {
                return data;
            }
            data.Fault = CranePool.instance.isFault(craneId);
           
            data.controlMode = status.Mode;//
            
            data.netData.ip = connect.ip;
            data.netData.readPort = connect.port + "";
            data.netData.controlPort = connect.port + "";
            data.netData.RoundtripTime = status.RoundtripTime;
            data.craneStatus = status.Cranestatus;
            data.ForkStatus = status.ForkStatus;
            data.runingData.errDatailCode = status.errDatailCode;
            data.runingData.errCodeNo = status.errCodeNo;
            data.runingData.NowY = status.NowY;
            data.runingData.NowX = status.NowX;
            data.runingData.Y_Speed = status.Y_Speed;
            data.runingData.X_Speed = status.Y_Speed;
            data.taskState = status.TaskState;
            data.DO = status.DO;
            data.DI = status.DI;

            data.AO = status.AO;
            data.AI = status.AI;
          
            return data;
        }

        ///Crane/IsAutoRunning/craneId/
        public bool IsAutoRunning(List<String> param) {
            int craneId = int.Parse(param[0]);
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
            String info = CraneTools.CheckRobot( CranePool.instance.get(craneId));

            return String.IsNullOrEmpty(info);

        }
        ///Crane/ClearTaskState/craneId/forkNo
        public bool ClearTaskState(List<String> param) {
            int craneId = int.Parse(param[0]);
            ushort ForkNo = ushort.Parse(param[1]);
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
            RobotStatus status = CranePool.instance.get(craneId);
            if(status.TaskState.Count == 1) {
                return connect.ClearTaskState();
            } else {
                return connect.ClearTaskState(ForkNo);
            }
        }

        public bool sendTask(List<String> param) {
            int craneId = int.Parse(param[0]);
          
            ushort forkNo = ushort.Parse(param[1]);
        
            String desId = param[2];
            int action = int.Parse(param[3]);
            int lenType= int.Parse(param[4]);
            int index = 0;
            if(craneId != 4) {
                if(desId.Length > 5) {
                    index = int.Parse(desId.Substring(5));
                    desId = desId.Substring(0,5);
                }
                
            }

            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
            if(connect.isTaskBusy(forkNo)) {
                return false;
            }
            
            PhysicalLocation des = ServerFactray.getServer<IPhysicalLocationServer>().getById(int.Parse(desId));

           
            if(des == null) {
                return false;
            }
            CraneAllocateJobHX job = TaskPool.get<CraneAllocateJobHX>(craneId);
            RTConfig rt = job.rt;
            TaskCrane tc = new TaskCrane();
            int gap = 0;
            if(lenType == 1) {
                 gap = 2065;
            }else if(lenType == 2) {
                 gap = 2580;
            }
            int dis = (index-1) * gap;
            tc.locDir = des.Direction;
            tc.locX = des.X- dis;
            tc.locY = des.Y;
            tc.locZ = des.deep;
            tc.locId = des.id;
            tc.itemType = 10 + lenType;
          
            TaskModel model =CraneTools.ConvertTaskModel(rt,tc,forkNo);
            model.SMATCode = (SemiAutoActionCode)action;
         
            model.TaskNo = TaskUtil.getTaskNo();
            return connect.SendTask(model);
        }

        /// <summary>
        /// 执行手动动作
        /// </summary>
        /// <param name="craneid"></param>
        /// <param name="action"></param>
        /// <param name="num">电机速度</param>
        /// <returns></returns>
        ///    ///Crane/ManualAction/craneId/ManualActionCode
        public bool ManualAction(List<String> param) {
            int craneId = int.Parse(param[0]);
            int forks = int.Parse(param[1]);
            int mode = int.Parse(param[2]);
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
             connect.manualAction((ManualActionCode)mode,forks,100);

            return true;
        }
        ///Crane/ReConnectRobot/craneId/mode
        public bool EmergencyStop(List<String> param) {
            int craneId = int.Parse(param[0]);
            int mode = int.Parse(param[1]);
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
             connect.EmergencyStop((RobotMode)mode);
            return true;
        }

        ///Crane/ReConnectRobot/craneId/mode
        public bool SwtichMode(List<String> param ) {
            int craneId = int.Parse(param[0]);
            int mode = int.Parse(param[1]);
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
            if(connect == null) {
                return false;
            }
             connect.SwtichMode((RobotMode)mode);
            return true;

        }
     


        ///Crane/ClearFault/craneId
        public string ClearFault(List<String> param) {
            int craneId = int.Parse(param[0]);
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);

            try {
                string err = CraneTools.CheckRobot(CranePool.instance.get(craneId));
                if(string.IsNullOrEmpty(err)) {

                    if(CraneTools.DoUnfinishedTask(craneId)) {//"故障复位"
                        CranePool.instance.setFault(craneId,false);
                        CranePool.instance.setErrLog(craneId,string.Empty);


                    } else {
                        LoggerCommon.fileAll("当前堆垛机任务下发失败." + craneId);
                    }


                } else {
                    err = "当前堆垛机仍处于故障状态，无法清除故障--->" + err;
                }
                return err;
            } catch(Exception ex) {
                return ex.Message;
            }


        }
        public string reset(List<String> param) {
            int craneId = int.Parse(param[0]);

            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
            
             connect.reset();

            return "复位成功";
        }

        
        ///Crane/craneStates/craneId/forkNo/src/des/actionid
        public bool Send_SEMI_Task(List<String> param ) {
            int craneId = int.Parse(param[0]);
            int forkNo = int.Parse(param[1]);
            String srcID = param[2];
            String desID =param[3];
            int actionId = int.Parse(param[4]);
            CraneConnect connect = TaskPool.get<CraneConnect>(craneId);
            if(connect.isTaskBusy(0)) {
                return false;
            }


            IPhysicalLocationServer physicalLocationServer= ServerFactray.getServer<IPhysicalLocationServer>();

            PhysicalLocation src = physicalLocationServer.getById(int.Parse(srcID));
            PhysicalLocation des = physicalLocationServer.getById(int.Parse(desID));

            if(src == null) {
                src = des;
            }
            if(des == null) {
                des = src;
            }
            TaskModel model = new TaskModel() {
                SMATCode = (SemiAutoActionCode)actionId,
                TargetX = (int)des.X,
                TargetY = (int)des.Y,
                Fork_Drop_Distance = des.deep,//放货长度 3-传送线  1-左边  2-右面
                X = (int)src.X,
                Y = (int)src.Y,
                Fork_Pick_Distance = src.deep,//取货长度 3-传送线  1-左边  2-右面
                Thickness = 1,   //1小车 2-货
                ForkNo = 1,
                IsIn = 1,
                Forkdir = src.Direction == 1 ? ForkDir.LEFT : ForkDir.RIGHT,
                TargetForkDir = des.Direction == 1 ? ForkDir.LEFT : ForkDir.RIGHT

            };
            //int taskNo = new WcsProcedure().GetMaxId();
            //model.TaskNo = taskNo;
            return connect.SendTask(model);
        }
    }

}
