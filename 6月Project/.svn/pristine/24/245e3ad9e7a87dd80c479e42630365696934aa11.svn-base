<template>
  <div class="app-container">
    <div class="filter-container">
      <el-input v-model="listQuery.loginName" :placeholder="$t('permissionUser.loginName')" style="width: 200px;" class="filter-item" @keyup.enter.native="handleFilter" />
      <el-select v-model="listQuery.active" :placeholder="$t('permissionUser.active')" clearable class="filter-item" style="width: 130px">
        <el-option v-for="item in ActiveOptions" :key="item.key" :label="item.display_name" :value="item.key" />
      </el-select>
      <!-- <el-select v-model="listQuery.sort" style="width: 140px" class="filter-item" @change="handleFilter">
        <el-option v-for="item in sortOptions" :key="item.key" :label="item.label" :value="item.key" />
      </el-select> -->
      <el-button v-waves class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">
        {{ $t('permissionUser.search') }}
      </el-button>
      <el-button  class="filter-item" style="margin-left: 10px;" type="primary" icon="el-icon-edit" @click="handleCreate">
        {{ $t('permissionUser.add') }}
      </el-button>
      <el-button v-waves :loading="downloadLoading" class="filter-item" type="primary" icon="el-icon-download" @click="handleDownload">
        {{ $t('permissionUser.export') }}
      </el-button>     
    </div>

    <el-table
      :key="tableKey"
      v-loading="listLoading"
      :data="list"
      border
      fit
      highlight-current-row
      style="width: 100%;"
      @sort-change="sortChange"
    >
      <el-table-column :label="$t('permissionUser.id')" prop="id" sortable="custom" align="center" width="80" :class-name="getSortClass('id')">
        <template slot-scope="scope">
          <span>{{scope.$index+1}}</span>
        </template>
      </el-table-column>

      <!-- <el-table-column :label="$t('permissionUser.id')" prop="id" sortable="custom" align="center" width="80" :class-name="getSortClass('id')">
        <template slot-scope="{row}">
          <span>{{ row.id }}</span>
        </template>
      </el-table-column> -->
      
      <el-table-column :label="$t('permissionUser.loginName')" min-width="110px">
         <template slot-scope="{row}">
           <span v-if="row.loginName" class="link-type" @click="handleFetchPv(row)">{{ row.loginName }}</span>
          <span v-else>0</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('permissionUser.realName')" width="110px" align="center">
        <template slot-scope="{row}">
          <span>{{ row.realName }}</span>
        </template>
      </el-table-column>     
      <el-table-column :label="$t('permissionUser.active')" class-name="status-col" width="100">
        <template slot-scope="{row}">            
          <el-tag >
            {{ row.active | activeFilter }}
          </el-tag>
        </template>
      </el-table-column>
      <el-table-column :label="$t('permissionUser.date')" width="150px" align="center">
        <template slot-scope="{row}">
          <span>{{ row.createDatetime | parseTime('{y}-{m}-{d} {h}:{i}') }}</span>
        </template>
      </el-table-column>
      <el-table-column :label="$t('permissionUser.actions')" align="center" width="230" class-name="small-padding fixed-width">
        <template slot-scope="{row,$index}">
          <el-button type="primary" size="mini" @click="handleUpdate(row)">
            {{ $t('permissionUser.edit') }}
          </el-button>      
          <!-- <el-button v-if="row.status!='启用'" size="mini" type="success" @click="handleModifyStatus(row,'启用')">
            {{ $t('permissionUser.publish') }}
          </el-button>
          <el-button v-if="row.status!='禁用'" size="mini" @click="handleModifyStatus(row,'禁用')">
            {{ $t('permissionUser.draft') }}
          </el-button> -->
          <el-button v-if="row.active!='deleted'" size="mini" type="danger" @click="handleDelete(row,$index)">
            {{ $t('permissionUser.delete') }}
          </el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit" @pagination="getList" />

    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form ref="dataForm" :rules="rules" :model="temp" label-position="right" label-width="80px" style="width: 400px; margin-left:50px;">
        <el-form-item :label="$t('permissionUser.realName')" prop="realName">
          <el-input v-model="temp.realName" />
        </el-form-item>
        <el-form-item :label="$t('permissionUser.date')" prop="createDatetime" label-width="80px">
          <el-date-picker v-model="temp.createDatetime" type="datetime" placeholder="Please pick a date" />
        </el-form-item>
        <el-form-item :label="$t('permissionUser.loginName')" prop="loginName" label-width="80px">
          <el-input v-model="temp.loginName" />
        </el-form-item>       
        <el-form-item :label="$t('permissionUser.password')" prop="password" label-width="80px">
          <el-input v-model="temp.password" />
        </el-form-item>
        <el-form-item :label="$t('permissionUser.active')" prop="active" label-width="80px">
            <el-select v-model="temp.active" class="filter-item" placeholder="Please select">
            <el-option v-for="item in ActiveOptions" :key="item.key " :label="item.display_name" :value="item.key " />
            </el-select>
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">
          {{ $t('permissionUser.cancel') }}
        </el-button>
        <el-button type="primary" @click="dialogStatus==='create'?createData():updateData()">
          {{ $t('permissionUser.confirm') }}
        </el-button>
      </div>
    </el-dialog>

    <el-dialog :visible.sync="dialogPvVisible" title="Reading statistics">
      <el-table :data="pvData" border fit highlight-current-row style="width: 100%">
        <el-table-column prop="key" label="Channel" />
        <el-table-column prop="pv" label="Pv" />
      </el-table>
      <span slot="footer" class="dialog-footer">
        <el-button type="primary" @click="dialogPvVisible = false">{{ $t('permissionUser.confirm') }}</el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>
import waves from '@/directive/waves' // waves directive
import { parseTime } from '@/utils'
import Pagination from '@/components/Pagination' // secondary package based on el-pagination
import { getUser,CreateUser,UpdateUser, deleteUser } from '@/api/user'

const ActiveOptions = [
  { key: '1', display_name: '是' },
  { key: '0', display_name: '否' }
]
// arr to obj, such as { CN : "China", US : "USA" }
const calendarTypeKeyValue = ActiveOptions.reduce((acc, cur) => {
  acc[cur.key] = cur.display_name
  return acc
}, {})

export default {
  name: 'User',
  components: { Pagination },
  directives: { waves },
  filters: {
    activeFilter(active) {
      const activeMap = {
        1: '是',
        0: '否'
      }
      return activeMap[active]
    },
    typeFilter(type) {
      return calendarTypeKeyValue[type]
    }
  },
  data() {
    const validatePassword = (rule, value, callback) => {
      if (value.length < 6) {
        callback(new Error('The password can not be less than 6 digits'))
      } else {
        callback()
      }
    }
    return {
      tableKey: 0,
      list: null,
      total: 0,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 20,
        password: undefined,
        loginName: undefined,
        active: undefined,
        sort: '+id'
      },
      ActiveOptions,
      sortOptions: [{ label: 'ID Ascending', key: '+id' }, { label: 'ID Descending', key: '-id' }],
      showReviewer: false,
      temp: {
        id: undefined,
        password: '',
        createDatetime: new Date(),
        loginName: '',
        type: '',
        active: ''
      },
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: 'Edit',
        create: 'Create'
      },
      dialogPvVisible: false,
      pvData: [],
      rules: {
        password: [{ required: true,  trigger: 'change',validator: validatePassword }],
        createDatetime: [{ type: 'date', required: true, message: 'createDatetime is required', trigger: 'change' }],
        loginName: [{ required: true, message: 'loginName is required', trigger: 'blur' }]
      },
      downloadLoading: false
    }
  },
  created() {
    this.getList()
  },
  methods: {
    getList(){
      this.listLoading = true
      //const queryData = Object.assign({}, this.listQuery)
      getUser(this.listQuery).then(response => {
        this.list = response.data
        this.total = response.total//response.data.total

        // Just to simulate the time of the request
        setTimeout(() => {
          this.listLoading = false
        }, 1.5 * 10)
      })
    },

    handleFilter() {
      this.listQuery.page = 1
      this.getList()
    },
    handleModifyStatus(row, active) {
      this.$message({
        message: '操作成功',
        type: 'success'
      })
      row.active = active
    },
    sortChange(data) {
      const { prop, order } = data
      if (prop === 'id') {
        this.sortByID(order)
      }
    },
    sortByID(order) {
      if (order === 'ascending') {
        this.listQuery.sort = '+id'
      } else {
        this.listQuery.sort = '-id'
      }
      this.handleFilter()
    },
    resetTemp() {
      this.temp = {
        id: undefined,
        password: '',
        createDatetime: new Date(),
        loginName: '',
        active: undefined,
        type: ''
      }
    },
    handleCreate() {
      this.resetTemp()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    createData() {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {         
          CreateUser(this.temp).then(() => {
            this.list.unshift(this.temp) //回调刷新
            this.dialogFormVisible = false
            this.$notify({
              title: '成功',
              message: '创建成功',
              type: 'success',
              duration: 2000
            })
            //刷新列表
            this.getList();
          })
        }
      })
    },
    handleUpdate(row) {
      this.temp = Object.assign({}, row) // copy obj
      this.temp.createDatetime = new Date(this.temp.createDatetime)
      this.temp.password = "";
      // if(this.temp.active==0)
      // {
      //   this.temp.active="否";
      // }
      // else
      // {
      //   this.temp.active="是";
      // }
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    updateData() {
      this.$refs['dataForm'].validate((valid) => {
        if (valid) {
          const tempData = Object.assign({}, this.temp)
          tempData.createDatetime = tempData.createDatetime
          //tempData.createDatetime = +new Date(tempData.createDatetime) // change Thu Nov 30 2017 16:41:05 GMT+0800 (CST) to 1512031311464
          UpdateUser(tempData).then(() => {
            const index = this.list.findIndex(v => v.id === this.temp.id)
            this.list.splice(index, 1, this.temp)
            this.dialogFormVisible = false
            this.$notify({
              title: '成功',
              message: '更新成功',
              type: 'success',
              duration: 2000
            })
          })
        }
      })
    },
    handleDelete(row, index) {
      this.$confirm('确定删除该用户吗?', 'Warning', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      })
        .then(async() => {
          await deleteUser(row.id)
          this.list.splice(index, 1)
          //this.rolesList.splice($index, 1)
          this.$message({
            title: '成功',
            message: '删除成功',
            type: 'success',
            duration: 2000
          })
        })
        .catch(err => { console.error(err) })
    },
    handleFetchPv(row) {
      this.temp = Object.assign({}, row) // copy obj
      this.temp.createDatetime = new Date(this.temp.createDatetime)
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    handleDownload() {
      this.downloadLoading = true
      import('@/vendor/Export2Excel').then(excel => {
        const tHeader = ['createDatetime', 'loginName', 'type', 'password', 'active']
        const filterVal = ['createDatetime', 'loginName', 'type', 'password', 'active']
        const data = this.formatJson(filterVal)
        excel.export_json_to_excel({
          header: tHeader,
          data,
          filename: 'table-list'
        }) 
        this.downloadLoading = false
      })
    },
    formatJson(filterVal) {
      return this.list.map(v => filterVal.map(j => {
        if (j === 'createDatetime') {
          return parseTime(v[j])
        } else {
          return v[j]
        }
      }))
    },
    getSortClass: function(key) {
      const sort = this.listQuery.sort
      return sort === `+${key}` ? 'ascending' : 'descending'
    }
  }
}
</script>
