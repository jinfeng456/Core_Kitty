<template>
  <div class="page-container">
	<!--工具栏-->
	<div class="toolbar" style="float:left;padding-top:10px;padding-left:15px;">
		<el-form :inline="true" :model="filters" :size="size">
			<el-form-item>
					<el-input v-model="filters.receiptNo" :placeholder="$t('field.receipt.receiptNo')" :style="{width: '175px'}"></el-input>
			</el-form-item>	
			<el-form-item>
					<el-select v-model="filters.status"  style="width: 175px;" clearable :placeholder="$t('field.receipt.status')">
						<el-option v-for="item in dicts.status" :key="item.value"
							:label="item.label" :value="item.value" >
						</el-option>
					</el-select>
			</el-form-item>	
			<el-form-item>
					<el-select v-model="filters.stn"  style="width: 175px;" clearable :placeholder="$t('field.receipt.stn')">
						<el-option v-for="item in dicts.stnOut" :key="item.value"
							:label="item.label" :value="item.value" >
						</el-option>
					</el-select>
			</el-form-item>			
			<el-form-item>
					<el-select v-model="filters.outType"  style="width: 175px;" clearable :placeholder="$t('field.receipt.outType')" disabled="false">
						<el-option v-for="item in dicts.outTypeItem" :key="item.value"
							:label="item.label" :value="item.value" >
						</el-option>
					</el-select>
			</el-form-item>		
		</el-form>
	</div>
	<div class="toolbar" style="float:left;padding-top:0px;padding-left:15px;">
		<el-form :inline="true" :model="filters" :size="size">	
		<el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.createBeginTime "
                          placeholder="创建开始时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>
        <el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.createEndTime "
                          placeholder="创建结束时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>	
		<el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.finishBeginTime "
                          placeholder="完成开始时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>
        <el-form-item>
          <el-date-picker type="datetime"
                          v-model="filters.finishEndTime "
                          placeholder="完成结束时间"
                          value-format="yyyy-MM-dd"
                          format="yyyy-MM-dd"
                          :style="{width: '175px'}">
          </el-date-picker>
        </el-form-item>
			<el-form-item>
				<kt-button icon="fa fa-search" :label="$t('action.search')" perms="core:CheckOut:view" type="primary" @click="findPage(null)"/>
			</el-form-item>
			<el-form-item> 
				<kt-button icon="fa fa-plus" :label="$t('action.add')" perms="core:CheckOut:add" type="primary" @click="handleAdd" />
			</el-form-item>			
		</el-form>
	</div>
	<div class="toolbar" style="float:right;padding-top:0px;padding-right:0px;">
		<el-form :inline="true" :size="size">
			<el-form-item>
				<el-button-group>
					<el-tooltip content="打印" placement="top">
						<el-button icon="fa fa-print" @click="handlePreview" /> 
					</el-tooltip>		
		
					<el-tooltip content="导出Excel" placement="top">
						<el-button icon="fa fa-file-excel-o" @click="exportExcel" /> 
					</el-tooltip>
				</el-button-group>
			</el-form-item>

		</el-form>
		<!--表格显示列界面-->
		<table-column-filter-dialog ref="tableColumnFilterDialog" :columns="columns" 
			@handleFilterColumns="handleFilterColumns"> 
		</table-column-filter-dialog>
	</div>
	<!--表格内容栏-->
	<kt-table2  permsEdit="core:receiptout:edit" permsDelete="core:receiptout:delete" :myButtons="myButtons" :data="pageResult" :columns="filterColumns"
		@findPage="findPage" @handleExport="handleExport"  @handleEdit="handleEdit" @handleDelete="handleDelete" @handleGenerate="handleGenerate" :showGenerate="true" permsGenerate="core:whOtherOut:generate" permsExport="core:whOtherOut:export" :pageRequest="this.pageRequest">
	</kt-table2>
	<edit-receipt-out :key="componentKey" :subDataForm="dataForm" :dialogVisible="dialogVisible1" :operation="operation"  @receiptHidden="receiptHidden" ></edit-receipt-out>

  </div>

</template>

<script>
import PopupTreeInput from "@/components/PopupTreeInput"
import KtTable2 from "@/views/Core/KtTable2"
import KtButton from "@/views/Core/KtButton"
import TableColumnFilterDialog from "@/views/Core/TableColumnFilterDialog"
import { format } from "@/utils/datetime"
import { getLodop } from "@/utils/LodopFuncs"
import { printSelected } from "@/utils/print"
import EditReceiptOut from "./EditReceiptOut"
import { baseUrl } from '@/utils/global'
import { printMoudle } from "@/utils/print"
import { export_json_to_excel } from "@/excel/Export2Excel"

export default {
	components:{
		PopupTreeInput,
		KtTable2,
		KtButton,
		TableColumnFilterDialog,
		EditReceiptOut,	
	},
	data() {
		return {
			size: 'small',
			filters: {
				batchNo: '',
				outTypeClass:4,
        		outType:parseInt(this.$route.path.substr(this.$route.path.lastIndexOf('/')+1))
			},
			uploadData:{

			},
			innerHtml:'',
			componentKey: 0,
			baseUrl:baseUrl,
			columns: [],
			dicts:this.$store.state.dict.dicts,
			filterColumns: [],
			pageRequest: { pageNum: 1, pageSize: 7 },
			pageResult: {},
			myButtons:[{
				name:"handleEdit",
				perms:"core:receiptout:edit",
				label:"action.edit",
				icon:"fa fa-edit"
			},{
				name:"handleDelete",
				perms:"core:receiptout:delete",
				label:"action.delete",
				type:"danger",
				icon:"fa fa-trash"
			}],
			exportUrl:"receiptOut/ExportExcel",  //导出excel路径
			operation: false, // true:新增, false:编辑
			dialogVisible1: false, // 新增编辑界面是否显示
			editLoading: false,
			stockInList:[],
			// 新增编辑界面数据
			dataForm: {
				id: 0,
				outTypeClass:4,
				outType:parseInt(this.$route.path.substr(this.$route.path.lastIndexOf('/')+1))

			},
			deptData: [],
			deptTreeProps: {
				label: 'name',
				children: 'children'
			},
			roles: []
			
		}
	},
	computed: {
		
	},	
	methods: {
		receiptHidden:function(){
			
			this.dialogVisible1=false;
			this.findPage(null);
		},
		// 获取分页数据
		findPage: function (data) {	
			if(data!==null){
				this.filters.pageNum=data.pageRequest.pageNum		
			}else{
				this.filters.pageNum=1
			}
			this.filters.pageSize=this.pageRequest.pageSize
			this.$api.receipt.findReceiptOutPage(this.filters).then((res) => {
				this.pageResult = res.data			
			}).then(data!=null?data.callback:'')
		},
		 //导出的方法
		exportExcel() {
			this.filters.pageSize=-1
			require.ensure([], () => {		
				this.$api.receipt.findReceiptOutPage(this.filters).then((res) => {		
				const tHeader = ['单号', '状态', '站台号'];
				// 上面设置Excel的表格第一行的标题
				const filterVal = ['receiptNo', 'status', 'stn'];
				// 上面的index、nickName、name是tableData里对象的属性
				const list = this.pageResult.content;  //把data里的tableData存到list
				const data = this.formatJson(filterVal, list);
				export_json_to_excel(tHeader, data, '出库单导出');
				})
			})
			},
		// 批量删除
		handleDelete: function (data) {
			this.$api.receipt.batchDelete(data.params).then(data!=null?data.callback:'')
		},
		formatJson(filterVal, tableData) {
			return tableData.map(v => {
				return filterVal.map(j => {
						return v[j]
					})
				}
			)
		},
		// 显示打印界面
		handlePreview: function () {
			//debugger
			this.$api.receipt.findReceiptOutPage(this.filters).then((res) => {				
				//this.stockInList = res.data.content	
				//for (let index = 0; index < res.data.totalSize; index++) {
					this.$api.receipt.Preview(res.data.content[0]).then((res) => {
				    var strList=res.data;	
					var html = strList.html;
				
						if (strList.outList.length > 0) {
								    html = html.replace("{receiptNo}", strList.outList[0].receiptNo);
								    //html = html.replace("{srcSoNo}", (strList.outList[0].srcSoNo==null ?'':strList.stockInList[0].srcSoNo));
								    // html = html.replace("{SupplierNo}", strList[1][0].StockInNo);
								    // html = html.replace("{SupplierName}", strList[1][0].StockInNo);
								}
								var detail = "";
								if (strList.outDetailList.length > 0) {
								    for (let index = 0; index < strList.outDetailList.length; index++) {
								        detail += "<tr>";
								        detail += "<td>" + (strList.outDetailList[index].batchNo==null?'':strList.outDetailList[index].batchNo) + "</td>";
								        detail += "<td>" + (strList.outDetailList[index].itemName==null?'':strList.outDetailList[index].itemName) + "</td>";
								        detail += "<td>" + (strList.outDetailList[index].planCount==null?0:strList.outDetailList[index].planCount) + "</td>";
								        detail += "<td>" + (strList.outDetailList[index].finishCount==null?0:strList.outDetailList[index].finishCount) + "</td>";
								        detail += "<td>" + (strList.outDetailList[index].stn==null?'':strList.outDetailList[index].stn) + "</td>";
								        // detail += "<td>" + "StorageRackName" + "</td>";
								        // detail += "<td>" + "Status" + "</td>";
								        // detail += "<td>" + "AName" + "</td>";
								        detail += "</tr>";
								    }
								}
								html = html.replace("{Content}", detail);	
								var LODOP = this.LODOPL();
									LODOP.PRINT_INIT("");
									LODOP.NewPage(); 
									LODOP.PRINT_INIT("入库单")
									LODOP.ADD_PRINT_HTM(0, 100, "100%", "100%", html);
									//if (type === 1) {
										//LODOP.PREVIEW();
										LODOP.PRINT_DESIGN();
									// } else {
									//     LODOP.PRINT();
									// }				
					
				})
					
				//}				
				
            })        

		},
		handlePreviewIframe: function (data) {
				this.$api.receipt.Preview(null).then((res) => {	
				this.innerHtml = res.data;
				printMoudle(this.innerHtml);		    
		})
		
			// var preHtml = '<h4 style="text-align:center;text-decoration: underline">领料申请单（含紧急领料申请）</h4>';

            // var preTable = '<table style="border-collapse: collapse;font-size: 8px;width:100%;"><tr>';

            // preTable += '<td>' + '领用单位'+ '：' + 2 + '</td>';

            // preTable += '<td>' + '领用单位' + '：' + 2 + '</td>';

            // preTable += '<td>' + '领用单位' + '：' + 2 + '</td>';

            // preTable += '<td>' + '领用单位' + '：' + 2 + '</td>';

            // preTable += '</tr><tr>';

            // preTable += '<td>' + '领用单位' + '：' + 2 + '</td>';

            // preTable += '<td>' + '领用单位' + '：' + 2 + '</td>';

            // preTable += '</tr></table>';

            // var endTable = '<table style="border-collapse: collapse;font-size: 8px;width:100%;"><tr>';

            // endTable += '<td style="text-align:left">' + '领用人' + '：</td>';
            // endTable += '<td>' + 1 + '</td>';

            // endTable += '<td style="text-align:left">' + '领用人' + '：</td>';
            // endTable += '<td>' + 1 + '</td>';

            // endTable += '<td style="text-align:left">' + '领用人' + '：</td>';
            // endTable += '<td>' + 1 + '</td>';

            // endTable += '</tr></table>';

            // var endHtml = '<h5>备注：根据领料申请来填写表单，不使用的空表格删除后，走申请审批</h5>';
            // printSelected(preHtml, preTable, endTable, endHtml,"","");					  
		},


		handleAdd: function () {
			this.componentKey += 1;
			this.dialogVisible1 = true
			this.operation = true
			this.dataForm = {
				id: 0,
				outTypeClass:4,
				outType:parseInt(this.$route.path.substr(this.$route.path.lastIndexOf('/')+1))
			}
		},
		// 生成任务
		handleGenerate: function (params) {
			this.$confirm('确定生成任务吗？', '提示', {}).then(() => {
						this.$api.receipt.otheroutGenerate(params.row).then((res) => {
							if(res.code == 200) {
								this.$message({ message: '操作成功', type: 'success' })
								this.findPage(null)
							} else {
								this.$message({message: '操作失败, ' + res.msg, type: 'error'})
							}							
						})
					})
		},
		//导出文档
		handleExport: function (params) {	
			this.saveFile(params);
		},
		saveFile : function(params) {
			 let a = document.createElement('a')
			 a.href =baseUrl+"/api/file/exports/"+params.row.id+"/"+params.row.receiptNo+"/"+params.row.outType
			 a.click();
		},
		// 显示编辑界面
		handleEdit: function (params) {
			this.dialogVisible1 = true
			this.operation = true
			this.dataForm = Object.assign({}, params.row)
			 
		},
		// 时间格式化
      	dateFormat: function (row, column, cellValue, index){
          	return format(row[column.property])
      	},
		LODOPL: function () {
                    var LODOP = getLodop();
                        return LODOP;
                        //layer.msg("请下载Lodop插件", { icon: 5 });
        },
		selectionFormat: function (row, column, cellValue, index){
			let key=""
			let propt=column.property;
			if(propt=="stn"){
				key="stnOut"
			}else if(propt=="outType"){
				key="outTypeItem"
			}else if(propt=="priority"){
				key="priority"
			}else if(propt=="pickType"){
				key="pickType"
			}else if(propt=="status"){
				key="status"
			}
	
		    let val=row[column.property];
			let dict =this.$store.state.dict.dicts[key];
			if(dict==undefined){
					return row[column.property]
			}
			for(let i=0;i<dict.length;i++){
				if(dict[i].value==val){
					return dict[i].label;
				}
			}

          	return row[column.property]
      	},
		// 处理表格列过滤显示
      	displayFilterColumnsDialog: function () {
			this.$refs.tableColumnFilterDialog.setDialogVisible(true)
      	},
		// 处理表格列过滤显示
      	handleFilterColumns: function (data) {
			this.filterColumns = data.filterColumns
			this.$refs.tableColumnFilterDialog.setDialogVisible(false)
      	}	
	},
	created (){
	

	},
	mounted() {
	this.columns = [
				{prop:"receiptNo", label:"field.receipt.receiptNo", minWidth:130}, 
				//{prop:"srcSoNo", label:"field.receipt.srcSoNo", minWidth:100},
				//{prop:"batchNo", label:"内部批号", minWidth:100},
				{prop:"status", label:"状态", minWidth:100 , formatter:this.selectionFormat},				
				{prop:"stn", label:"field.stn", minWidth:100 , formatter:this.selectionFormat},
				{prop:"outType", label:"field.receipt.outType", minWidth:95, formatter:this.selectionFormat},
				{prop:"priority", label:"field.receipt.priority", minWidth:70 , minWidth:120, formatter:this.selectionFormat},
				{prop:"pickType", label:"分拣类型", minWidth:95, formatter:this.selectionFormat},
				{prop:"beginTime", label:"beginTime", minWidth:140, formatter:this.dateFormat},
				{prop:"finshTime", label:"finshTime", minWidth:140, formatter:this.dateFormat}
			]
			this.filterColumns = this.columns;
	},
  	watch:{
		$route(to,from){
			console.log(to.path);
			debugger
			this.filters.outType=parseInt(to.path.substr(to.path.lastIndexOf('/')+1))
			this.findPage({pageRequest:{pageNum:1,pageSize:7}});
		}
  	}
}
</script>

<style scoped>

</style>