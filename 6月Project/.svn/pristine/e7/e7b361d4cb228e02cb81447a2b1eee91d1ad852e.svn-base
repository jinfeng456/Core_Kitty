using System;
using System.Linq;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using System.Globalization;
using CMNetLib.Robots.Crane;
using System.Collections.Generic;
using GK.WCS.Open.http.dto;
using GK.WCS.Client.Station;

namespace GK.WCS.Client.Control
{
    public partial class CraneInfo :BaseControl {
        public int CraneId=0;
        public CraneInfo()
        {
            InitializeComponent();
        }




        public void ShowInfo(CraneData carrierData,int CraneId) {



            this.Invoke(new Action(() => {
                this.CraneId = CraneId;

                CraneRuningData runingData = carrierData.runingData;
                lblX.Text = runingData.NowX.ToString(CultureInfo.InvariantCulture);
                lblY.Text = runingData.NowY.ToString(CultureInfo.InvariantCulture);
                lblCarrySpeed.Text = Math.Abs((float)runingData.X_Speed) / 1000.0 + "m/s";
                lblLiftSpeed.Text = Math.Abs((float)runingData.Y_Speed) / 1000.0 + "m/s";

                byte errCode = runingData.errCodeNo;
                CraneStatus craneStatus = carrierData.craneStatus;
                if(craneStatus == CraneStatus.Offline) {
                    showBut(false);
                } 
                String code = "0x" + ((byte)errCode).ToString("X2");
                lblErrorCode.Text = code + "(" + CU.getCraneErrCode_CN(errCode.ToString()) + ")";
                lblStatus.Text = CU.getCraneErrCode_CN(craneStatus.ToString());

                lblErrorDetail.Text = "0x" + ((byte)runingData.errDatailCode).ToString("X2");

                Dictionary<int,ForkErrCode> ForkStatus = carrierData.ForkStatus;
                if(ForkStatus.Count() > 0) {
                    int forkcode = (int)ForkStatus[1];
                    lblFork1Error.Text = CU.getForkStatus_CN(forkcode + "");
                }
            }));

            
        }
        public void showBut(bool continueWork) {
            btnClearFault.Visible = continueWork;
            btnReconnect.Visible = continueWork;
       }
       
      

        private void btnClearFault_Click(object sender,EventArgs e) {
            if(!warning("确认故障已修复，巷道内无人？")) {
                return;
            }
            if(!warning("请再次确认故障已修复并巷道内无人？")) {
                return;
            }

           
            string err = HttpCraneUtil.ClearFault(CraneId);
            if(string.IsNullOrEmpty(err)) {
                btnClearFault.Visible = false;
                btnReconnect.Visible = false;
            } else {
                info("复位失败：" + err);
                 
            }
         
        }

        private void btnReconnect_Click(object sender,EventArgs e) {
            try {
                HttpCraneUtil.reset(CraneId);
            } catch(Exception ex) {
                MessageBox.Show(ex.ToString());
            }
        }


      

    }
}
