using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;
using System.Reflection;
using GK.WCS.Open.http;
using GK.WCS.Open.http.server;
namespace ConsoleApplication2.HttpServer
{
    public class HttpProcess {



        public string HttpMethod;
        public string HttpProtocolVersionstring;
        public string HttpUrl;

        public Hashtable HttpHeaders = new Hashtable();
        public StreamWriter OutputStream;
        static Assembly ass;
        static HttpProcess(){
            ass = System.Reflection.Assembly.LoadFile(AppDomain.CurrentDomain.BaseDirectory + "GK.WCS.Open.dll");//要绝对路径
        }
        /// <summary>
        ///     这个是服务器收到有效链接初始化
        /// </summary>
        internal HttpProcess() {
          

        }

        internal ResJosnData Process(TcpClient client,Stream _inputStream,StreamWriter OutputStream) {
            ResJosnData res = new ResJosnData();
            Utils.WriteSuccess(OutputStream);
            var request = Utils.ReadLine(_inputStream);
            var tokens = request.Split(' ');
            if(tokens.Length != 3) {
                throw new Exception("invalid http request line");
            }
            HttpMethod = tokens[0].ToUpper();
            HttpUrl = tokens[1];
            HttpProtocolVersionstring = tokens[2];
            
            List<String> param = Utils.GetRequestExec(HttpUrl);
            if(param.Count == 0) {
                res.status = 1;
                res.data = "请求路径无效！";
                return res;
            }
            
            Hashtable ht = Utils. ParseRequest(_inputStream);
            try {
                if(HttpMethod.Equals("GET")) {
                    MethodInfo meth = null;
                    String className = param[0];
                    param.RemoveAt(0);
                    Type type = ass.GetType("GK.WCS.Open.http.server." + className + "Server");

                    if(type == null) {
                        throw new Exception("请求路径异常");
                    }
                    if(param.Count > 0) {
                        meth = type.GetMethod(param[0]);//加载方法
                        param.RemoveAt(0);
                    } else {
                        meth = type.GetMethod("work");//加载方法
                    }
                    if(meth == null) {
                        throw new Exception("资源不存在");
                    }
                    BaseServer server = (BaseServer)Activator.CreateInstance(type);
                    object value = meth.Invoke(server,new Object[] { param });//执行
                    res.status = 0;
                    res.data = value;
                    return res;
                } else if(HttpMethod.Equals("POST")) {
                    Utils.PostRequestExec(ht,_inputStream);
                    res.status = 1;
                    res.data = "post 未实现";
                    return res;
                } else {
                    res.status = 1;
                    res.data = HttpMethod+" 不支持";
                    return res;

                }
            } catch(Exception e) {
                Console.WriteLine("Exception: " + e);
                res.status = 1;
                res.data = e.Message;
                return res;
            
            }

           
        }






       


    }
}