
方法不要超过一屏幕 即大约不要超过30行
数据访问层不要超过1000行，后台控制层类逻辑类原则不要超过500行，一般200行左右
用一个文件夹内不要超过8个文件，（根据逻辑拆分为子文件夹，便于后期查找）

方法名
分页查询：FindPage
添加修改：Save
删除：Delete
查询全部：FindAll
返回对象树：FindTree
根据 XX 查询：FindByXX

路由
http://localhost:8091/user/findPage

请求响应结果：
{
  "code": 200,　// 状态吗，200：请求成功，其他：请求出错
  "msg": null,　// 错误消息，成功返回 null, 否则返回出错信息
  "data": {　　 // 返回请求数据，JSON 数据格式
    ...
  }
}

命名规范：

变量命名
所有命名不允许中文英文混用命名。

成员变量(类成员)和局部变量（方法内部变量）
统一使用 Camel 命名规则
正例: int age=0; 或者 int ageLevel=0; 
反例： int _age=0; 或者 int Age=0; 或者 int agelevel=0;

属性,const 变量，静态变量,枚举值命名
统一使用 Pascal 命名规则
正例: public int Age{get;set;} 或 public enum Gender{Male,Female} 或 public const int Age=0;
反例： public int age{get;set;} 或 public enum gender{Male,Female} 或 public const int age=0;

方法命名
统一使用 Pascal 命名规则
方法的命名。一般将其命名为动宾短语
正例: public void CreateFile(string fileName){}
反例： public void createfile(string filename){}

方法参数命名
统一使用 Camel 命名规则
正例: public void CreateFile(string fileName){}或 public void CreateFile(string path){}
反例： public void CreateFile(string filename){} 或 public void CreateFile(string Path){}

接口命名
统一使用 I 大写字母+Pascal 命名规则
正例: public interface IFileOperate{}
反例： public interface FileOperate{}


委托命名
统一使用 Pascal 命名规则+Delegate
正例: public delegate void FileOperateDelegate(string fileName);
反例： public delegate void FileOperate(string fileName);

类命名
统一使用 Pascal 命名规则
正例: public class FileInvoker{}
反例： public class fileInvoker{}
