using System;
using System.Net;
using CMFrameWork.Common;

namespace GK.WCS.Common {
    public class Tools {

        public static int step=0;

        public static T GetConfig<T>(String strPath) where T:new() {
            try {
                using(System.IO.StreamReader sr=new System.IO.StreamReader(strPath)) {
                    string ss=sr.ReadToEnd();
                    return ss.XmlToEntity<T>();
                }
            } catch(Exception ex) {

            }
            return default(T);
        }

        public static  int int32(byte[] b,int begin) {
            byte[] a = new byte[]
                  {
                            b[begin+3],
                            b[begin+2],
                            b[begin+1],
                            b[begin]
                  };
            return BitConverter.ToInt32(a,0);
        }
        public static ushort ushort16(byte[] b,int begin) {
            byte[] a = new byte[]
                  {
                            b[begin+1],
                            b[begin]
                  };
            return BitConverter.ToUInt16(a,0);
        }
        public static short short16(byte[] b,int begin) {
            try {
                byte[] a = new byte[]
                 {
                            b[begin+1],
                            b[begin]
                 };
                return BitConverter.ToInt16(a,0);
            } catch {
                return 0;
            }
           
        }
        public static ushort[] Int2Short(int val) {
            var rs=new ushort[2];
            var b=BitConverter.GetBytes(val);
            rs[0]=BitConverter.ToUInt16(new[] { b[2],b[3] },0);
            rs[1]=BitConverter.ToUInt16(new[] { b[0],b[1] },0);
            return rs;
        }

        public static ushort[] Long2Short(long val) {
            var rs = new ushort[4];
            var b = BitConverter.GetBytes(val);
            rs[0] = BitConverter.ToUInt16(new[] { b[6],b[7] },0);
            rs[1] = BitConverter.ToUInt16(new[] { b[4],b[5] },0);
            rs[2] = BitConverter.ToUInt16(new[] { b[2],b[3] },0);
            rs[3] = BitConverter.ToUInt16(new[] { b[0],b[1] },0);
            return rs;
        }

        /// <summary>
        /// 时间戳转DateTime
        /// </summary>
        /// <returns></returns>
        public static DateTime TimeStamp2DT(string timeStamp) {
            return DateTime.Parse("1970-01-01 00:00:00").AddSeconds(long.Parse(timeStamp));
        }

        public static DateTime TimeStamp2DT(long timeStamp) {
            return DateTime.Parse("1970-01-01 00:00:00").AddSeconds(timeStamp);
        }


        /// <summary>
        /// 获取时间戳
        /// </summary>
        /// <returns></returns>
        public static long GetTimeStamp(System.DateTime time) {
            return ConvertDateTimeToInt(time);
        }


        /// <summary>  
        /// 将c# DateTime时间格式转换为Unix时间戳格式  
        /// </summary>  
        /// <param name="time">时间</param>  
        /// <returns>long</returns>  
        public static long ConvertDateTimeToInt(System.DateTime time) {
            //System.DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1, 0, 0, 0, 0));
            //long t = (time.Ticks - startTime.Ticks) / 10000000;   //除10000调整为13位      
            //return t;

            TimeSpan sp=time-DateTime.Parse("1970-01-01 00:00:00");
            return (long)sp.TotalSeconds;

        }

        public static string seconds2DateSring(object timeStamp) {
            return seconds2Sring(timeStamp,"yyyy-MM-dd HH:mm:ss");
        }
        public static string seconds2TimeSring(object timeStamp) {
            return seconds2Sring(timeStamp,"yyyy-MM-dd HH:mm:ss");
        }

        private static string seconds2Sring(object timeStamp,String format) {

            if(timeStamp.GetType() == typeof(String)) {
                DateTime dt = Tools.TimeStamp2DT((String)timeStamp);
                return dt.ToString(format);
            } else if(timeStamp.GetType() == typeof(DateTime)) {
                return ((DateTime)timeStamp).ToString(format);
            } else {
                return timeStamp.ToString();
            }
        }
        public static bool isPrime(int num) {
            //两个较小数另外处理 
            if(num==2||num==3) {
                return true;
            }

            //不在6的倍数两侧的一定不是素数
            if(num%6!=1&&num%6!=5) {
                return false;
            }

            int tmp=(int)Math.Sqrt(num);//获取平方根
            //在6的倍数两侧的也可能不是素数
            for(int i=5;i<=tmp;i+=6) {
                if(num%i==0||num%(i+2)==0) {
                    return false;
                }
            }

            return true;
        }


       public static IPEndPoint getIPEndPoint(String ipStr) {
            int index = ipStr.IndexOf(':');

            String ip = ipStr.Substring(0,index);
            int port = ipStr.Substring(index + 1).ToInt32();
            IPEndPoint point = new IPEndPoint(IPAddress.Parse(ip),port);
            return point;
        }
    }
}
