using System.Collections.Generic;
using System.Threading;
using GK.WCS.DAL;
using GK.WCS.Entity;
using GK.WCS.Common;
using GK.WCS.Common.task;
using GK.WCS.Crane.dto;
using GK.WCS.Carrier;

namespace GK.WCS.Crane {
    public abstract class CraneAllocateJobHX:ZtTask {

        protected ITaskCarrierServer carrierDAL = ServerFactray.getServer<ITaskCarrierServer>();
        protected ITaskCraneServer craneTaskDAL = ServerFactray.getServer<ITaskCraneServer>();
        protected IMechineStatusServer rTConfigServer = ServerFactray.getServer<IMechineStatusServer>();
        protected CraneConnect connect = null;
        protected CraneSynchro craneSynchro = null;
 

        protected int craneId;
        protected int taskNo;
        public CraneAllocateJobHX(int id) {
            this.craneId = id;
            time = 800;
        }
        protected override bool init() {
            base.init();
         
            return true;
        }
        protected override long oneMaxTime() {
            return 12000;//每次成功sleep10秒
        }

        protected override void onlyOneTime() {
            connect = (CraneConnect)TaskPool.get<CraneConnect>(craneId);
            craneSynchro = (CraneSynchro)TaskPool.get<CraneSynchro>(craneId);
      
        }
        public override void excute() {
            GkCraneStatusBase gcs = craneSynchro.getCraneStatus();
            if(gcs==null) {
                return;
            }
          
           if (gcs.isfault())
            {
                LoggerCommon.consol("不再给"+craneId + "号垛机客户端继续分配任务");
                return;
            }
            if (gcs.checkCrane()) {
                return;
            }
            if(!chechModeDB()) {
                return;
            }
            TaskCrane tc = analyseTaskModel(gcs);
             taskNo=tc.taskNo;
            if(tc != null) {
                DoOutAndShiftTask(tc);
            } else {
                tc = preExecution();
                if(tc != null) {
                    DoOutAndShiftTask(tc);
                } else {
                    LoggerCommon.consol(craneId + "号垛机空闲");
                }
            }
        }
      
        public virtual TaskCrane preExecution() {
            return null;
        }
        /**
         * 
         * can worked finsh not Occupy the crane
         * */
        abstract public TaskCrane analyseTaskModel(GkCraneStatusBase gcs);
        public  bool chechModeDB() {
            //验证数据库当前垛机有无未完成的任务，//有logger打印出来
            //验证垛机mechine_status 表中overstop 位1 代表循环停止

            return craneTaskDAL.cycleStop(craneId);

           
        }   

       

        public virtual int getVirtualStn(TaskCrane taskModel) {
            return 0;
        }
        public bool DoOutAndShiftTask(TaskCrane taskModel) {
            if(connect.SendTask(taskModel, getVirtualStn( taskModel))) {
                Thread.Sleep(2000);
                stbAck();
                return true;
            } else {
                LoggerCommon.fileAll(string.Format("堆垛机{0}出库任务发送不成功" + taskModel.taskNo, craneId));
                return false;
            }
        }
        public void relyRemove(List<TaskCrane> list) {
            simpleDelete(list);
            List<TaskCrane> removeList = new List<TaskCrane>();
            foreach (TaskCrane ft in list) {
                if (hasRely(ft)) {//取货有依赖
                    removeList.Add(ft);
                }
            }
            foreach (TaskCrane ft in removeList) {
                if (list.Contains(ft)) {
                    list.Remove(ft);
                }
            }

        }
       
        void simpleDelete(List<TaskCrane> res) {
            List<TaskRely> relyList = craneTaskDAL.getAllTaskRely();
            Dictionary<long,long> dict = new Dictionary<long,long>();
            foreach(TaskRely rely in relyList) {
                if(!dict.ContainsKey(rely.taskId)) {
                    dict.Add(rely.taskId,rely.relyId);
                }
            }

            Dictionary<long,bool> working = new Dictionary<long,bool>();
            foreach(TaskCrane ft in res) {
                if( ft.status!=9) {//出库完成直接删除
                    if(!working.ContainsKey(ft.id)) {
                        working.Add(ft.id,true);

                    }
                } 
            }
            List<TaskCrane> removeList = new List<TaskCrane>();
            foreach(TaskCrane ft in res) {
                long id = ft.id;
                if(dict.ContainsKey(id)) {
                    if(working.ContainsKey(dict[id])) {
                        removeList.Add(ft);
                    }
                }

            }

            foreach(TaskCrane ft in removeList) {
                if(res.Contains(ft)) {
                    res.Remove(ft);
                }
            }

        }
       
       
        private bool hasRely(TaskCrane lastTask) {
            if(lastTask == null) {
                return true;
            }
            List<TaskRely> relyList = craneTaskDAL.getTaskRely(lastTask.id);
            foreach(TaskRely rely in relyList) {
                if(rely.relyName == "crane") {
                    TaskCrane crane = craneTaskDAL.getTaskCraneById(rely.relyId);
                    if(crane.status !=9) {
                        return true;
                    }
                } else if(rely.relyName == "carrier") {
                    TaskCarrier carrier = carrierDAL.getById<TaskCarrier>(rely.relyId);
                    if(carrier != null && carrier.status!=9) {
                        return true;
                    }
                }
            }
            return false;
        }

        void stbAck()
        {
            connect.writeInt(541,22,1);       
            LoggerCommon.consol(craneId + "号垛机任务号为 " + taskNo + "的任务发送成功");
            for (int i = 0; i <= 2; i++)
            {
                Thread.Sleep(50);
                byte[] ack = connect.reader(541, 24, 2);
                int resultAck = Tools.ushort16(ack, 0);
                if (resultAck == 1)
                {
                    LoggerCommon.consol(craneId + "号垛机收到任务号为 " + taskNo + "的任务");
                    connect.writeInt(541, 22, 0); 
                    break;
                }
            }
            

        }

    }
}
