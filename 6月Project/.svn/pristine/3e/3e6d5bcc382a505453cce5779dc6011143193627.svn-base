using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using GK.Mongon.DAL;
using GK.Mongon.entity;
using MongoDB.Bson;
using MongoDB.Driver;
using MongoDB.Driver.Builders;
using Newtonsoft.Json;

namespace GK.Mongon
{
   public  class WcslogUtil {

      

     

        public static void savelog(List<MongonLog>  list) {
            if(list.Count == 0) {
                return;
            }
            var collection = MongonBaseDAL.database.GetCollection<BsonDocument>("wcslog");

            List<BsonDocument> mongonList = new List<BsonDocument>();
            foreach(MongonLog mi in list) {
                BsonDocument document = BsonDocument.Parse(JsonConvert.SerializeObject(mi));
                mongonList.Add(document);
            }
            collection.InsertBatch(mongonList);
        }

       static public List<WcsLog> page(String begin, String end, String info) {


            MongoCollection<WcsLog> collection = MongonBaseDAL.database.GetCollection<WcsLog>("wcsLog");
            List<WcsLog> page = getPage(collection, begin, end, info);

            return page;
        }

        static public List<WcsLog> getPage(MongoCollection<WcsLog> collection, String begin, String end, String info) {
            List<WcsLog> logList = new List<WcsLog>();
            List<IMongoQuery> queryList = new List<IMongoQuery>();

            if (!String.IsNullOrEmpty(info)) {
                queryList.Add(Query.Matches("info", "/" + info + "/"));
            }
            queryList.Add(Query.GTE("ticks", Convert.ToDateTime(begin).Ticks));

            queryList.Add(Query.LTE("ticks", Convert.ToDateTime(end).Ticks));


            var query = Query.And(queryList);
            MongoCursor<WcsLog> result = collection.Find(query).SetSortOrder(SortBy.Descending("_id"));
            foreach (WcsLog log in result) {
                logList.Add(log);
            }
            return logList;
        }


    }
}
