using System;
using System.Collections.Generic;
using GK.WCS.Common;
using GK.WCS.Common.task;
using GK.WCS.Carrier;
using CMNetLib.Robots.CarrierChain;
using GK.WCS.Common.core.dto;
using GK.WCS.DAL;
using GK.WCS.Entity;

namespace GK.WCS.Controller {
    public class CarrierBeginTask3:CarrierBeginTaskAbs {


        INoTaskControlServer noTaskControlDAL = ServerFactray.getServer<INoTaskControlServer>();

        public CarrierBeginTask3() {
            time = 1000;
        }
        public override void onlyOneTime() {
            
        }
        public override void excute() {
            p3_1();//人工入库口
            //plc3(5);
            plc3(7);
           
        }
        private void plc3(int path) {
            HySignalState ss1 = CarrierPool.getSs(3,path*10+1);
            if(!ss1.needTask()) {
                return;
            }
            List<TaskCarrier> carrierList = CarrierDAL.getOutCarrirerCodes(300+path);

            if(carrierList.Count > 1) {
                String info =  "305传输线，有多个待执行的任务，请手动完成多余任务";
                foreach(TaskCarrier key in carrierList) {
                    info += key.code + ",";
                }
                LoggerCommon.consol(info);
                return;
            }
            CarrierWriteConnect connect = TaskPool.get<CarrierWriteConnect>(3);
            foreach(TaskCarrier carrier in carrierList) {
                List<TaskCrane> CraneList = craneTaskDAL.getTaskCraneBycompleteId(carrier.completeId);
                bool finsh = true;
                foreach(TaskCrane crane in CraneList) {
                    if(crane.Status != 9&& crane.Status != 7) {
                        finsh = false;
                    }
                }
                if(finsh) {
                    sendCrarrer(connect,carrierList[0]);
                }
            }
           
               

        }


        private void p3_1() {
            HySignalState ss1 = CarrierPool.getSs(3,11);
            if(!ss1.needTask()) {
                return;
            }

            List<TaskCarrier> carrierList = CarrierDAL.getCarrarTasksByStn(1,4);
    
            if(carrierList.Count == 1) {
                CarrierWriteConnect connect = TaskPool.get<CarrierWriteConnect>(3);
                sendCrarrer(connect,carrierList[0]);
                return;
            }

           

        }

       
        
      


    }
}
