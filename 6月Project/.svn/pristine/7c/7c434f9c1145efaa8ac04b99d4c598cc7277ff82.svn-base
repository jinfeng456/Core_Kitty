using GK.WCS.Entity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GK.WCS.Common.Util {
    public class TaskUtil {
        public static List<BaseTask> margin<T1, T2>(List<T1> l1,List<T2> l2) where T1 : BaseTask
                                                           where T2 : BaseTask {
            List<BaseTask> resList = new List<BaseTask>();
            T1 t1 = null;
            T2 t2 = null;

            while(true) {
                if(l1.Count > 0 && t1 == null) {
                    t1 = l1[0];
                }
                if(l2.Count > 0 && t2 == null) {
                    t2 = l2[0];
                }

                if(t1 == null && t2 == null) {
                    break;
                } else if(t1 == null && t2 != null) {
                    resList.Add(t2);
                    l2.Remove(t2);
                    t2 = null;
                } else if(t1 != null && t2 == null) {
                    resList.Add(t1);
                    l1.Remove(t1);
                    t1 = null;
                } else {
                    if(t1.id > t2.id) {
                        resList.Add(t2);
                        l2.Remove(t2);
                        t2 = null;
                    } else {
                        resList.Add(t1);
                        l1.Remove(t1);
                        t1 = null;
                    }
                }
            }
            return resList;
        }


        private static Object lockObj = new Object();

        private  const int arang = 0x7FFFFF;
        private static int TaskNo=-1;

        public static int getTaskNo() {
            lock(lockObj) {

                if(TaskNo == -1) {
                    TaskNo = getTime();
                } else {
                    TaskNo++;
                  int minTime =  getTime()-3600;
                    if(minTime < 0) {
                        minTime = minTime + arang;
                    }
                    if(TaskNo < minTime) {
                        TaskNo = minTime;
                    }

                    if(TaskNo >= arang) {
                        TaskNo -= arang;
                    }
                }
                return TaskNo + 1000000;
            }
          


        }

        static  private  int  getTime() {
            long seconds = System.DateTime.Now.Ticks / 10000 / 1000;
            int Task = (int)(seconds & arang);
            return Task;
        }


    }
}
