
using GK.WCS.Common;
using GK.WCS.Common.task;
using System.Collections.Generic;
using System.Text;


namespace GK.WCS.Carrier {
   

    public class CarrierSignal1:CarrierSignal {
        public int canRead = 0;
        public int width = 0;
        public CarrierSignal1() {
        }

        public override void onlyOneTime() {
            connect = TaskPool.get<CarrierChainReaderConnect1>();
            plcId = connect.plcId;
        }
        
        public override void otherSign(byte[] other) {
            canRead =Tools.short16(other,1);
            width = Tools.short16(other,3);

        }

        public override ushort getDataLength() {
            return 524;
        }

        public override int signCount() {
            return 34;
        }
    }
    public class CarrierSignal2:CarrierSignal {
        public int canRead = 0;
        public int width = 0;
        public CarrierSignal2() {
        }
        public override void onlyOneTime() {
            connect = TaskPool.get<CarrierChainReaderConnect2>();
            plcId = connect.plcId;
        }
        public override void otherSign(byte[] other) {
            canRead = Tools.short16(other,1);
            width = Tools.short16(other,3);

        }
        public override ushort getDataLength() {
            return 1140;
        }
        public override int signCount() {
            return 30;
        }
    }
    public class CarrierSignal3:CarrierSignal {
        public CarrierSignal3() {
        }
        public override void onlyOneTime() {
            connect = (CarrierChainReaderConnect)TaskPool.get<CarrierChainReaderConnect3>();
            plcId = connect.plcId;
        }
        public override ushort getDataLength() {
            return 210;
        }
        public override int signCount() {
            return 16;
        }
    }

}
