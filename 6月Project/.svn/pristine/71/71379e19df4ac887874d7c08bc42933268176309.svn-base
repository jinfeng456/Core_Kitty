using System;
using System.Collections.Generic;
using System.Linq;
using CMFrameWork.Common;
using System.Collections;
using System.Threading;
using CMNetLib.ModBus;

namespace GK.WCS.Common.dll {
    public class ModbusTcpConnect:SocketZtTaskConnect {
        protected short transaction_id = 0;
        protected byte _identifier;
        
        public override bool init() {
            base.init();
            this._identifier = Convert.ToByte(ip.Split('.')[3].ToInt32(0));
            return true;
        }

        public byte[] Receive(int len) {
            byte[] array = ReadTelex(len);
            
            Util.CheckErr(array,transaction_id,_identifier);

            return array;
        }

        public byte[] Receive() {
            byte[] array = ReadTelex(256);
          
           
            Util.CheckErr(array,transaction_id,_identifier);
            return array;
        }

    

        public byte[] ZeroingRegisters(ushort len) {//拼接报文并发送
            byte[] result;
            bool flag2 = len > 123;
            if(flag2) {
                return null;
            }
            ushort message_len = (ushort)(7 + len * 2);
            byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
            List<byte> list = new List<byte>();
            list.AddRange(collection);
            list.Add(16);

            list.AddRange(HyValueHelper.Instance.GetBytes(0));
            list.AddRange(HyValueHelper.Instance.GetBytes(len));
            list.Add((byte)(len * 2));
            for(int i = 0;i < (int)len;i++) {
                list.AddRange(HyValueHelper.Instance.GetBytes(0));
            }
            bool flag3 = this.Send(list.ToArray());
            if(flag3) {
                result = this.Receive();
            } else {
                result = null;
            }
            return result;
        }

        public byte[] ReadCoils(ushort start_address,ushort len) {
            byte[] first = Util.BuildMBAPHeader(this._identifier,len);
            byte[] second = Util.BulidReadCoilsTelex(start_address,len);

            byte[] result;

            byte[] buffer = first.Concat(second).ToArray<byte>();
            bool flag2 = this.Send(buffer);
            if(flag2) {
                Thread.Sleep(30);
                result = this.Receive();
            } else {

                result = null;
            }

            return result;
        }

        public byte[] ReadDiscreteInputs(ushort start_address,ushort len,ref ErrCode err) {

            byte[] result;

            bool flag2 = len > 2000;
            if(flag2) {
                err = ErrCode.TOO_MANY_REGISTERS_REQUESTED;
                result = null;
            } else {
                ushort message_len = 6;
                byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
                List<byte> list = new List<byte>();
                list.AddRange(collection);
                list.Add(2);
                list.AddRange(HyValueHelper.Instance.GetBytes(start_address));
                list.AddRange(HyValueHelper.Instance.GetBytes(len));
                bool flag3 = this.Send(list.ToArray());
                if(flag3) {
                    Thread.Sleep(30);
                    result = this.Receive();
                } else {
                    err = ErrCode.WRONG_NETWORK;
                    result = null;
                }
            }

            return result;
        }

        public byte[] ReadHoldingRegisters(ushort start_address,ushort len) {
            byte[] buffer = Util.readHoldingRegistersHeader(this._identifier,start_address,len);
            bool flag2 = this.Send(buffer);
            if(flag2) {
                Thread.Sleep(20);
                return this.Receive(len * 2 + 9);
            }
            return null;
        }

        public byte[] ReadInputRegisters(ushort start_address,ushort len) {
            byte[] result=null;
            if(len > 125) {
                return null;
            }
            ushort message_len = 6;
            byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
            List<byte> list = new List<byte>();
            list.AddRange(collection);
            list.Add(4);
            list.AddRange(HyValueHelper.Instance.GetBytes(start_address));
            list.AddRange(HyValueHelper.Instance.GetBytes(len));
            bool flag3 = this.Send(list.ToArray());
            if(flag3) {
                Thread.Sleep(30);
                result = this.Receive();
            }

            return result;
        }

        public byte[] WriteSingleCoil(ushort address,bool value) {
            ushort message_len = 6;
            byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
            List<byte> list = new List<byte>();
            list.AddRange(collection);
            list.Add(5);
            list.AddRange(HyValueHelper.Instance.GetBytes(address));
            list.AddRange(HyValueHelper.Instance.GetBytes(value ? 65280 : 0));
            bool flag = this.Send(list.ToArray());
            byte[] result=null;
            if(flag) {
                Thread.Sleep(30);
                result = this.Receive();
            } 
            return result;
        }

        public byte[] WriteSingleRegisters(ushort address,ushort value) {
        
            ushort message_len = 6;
            byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
            List<byte> list = new List<byte>();
            list.AddRange(collection);
            list.Add(6);
            list.AddRange(HyValueHelper.Instance.GetBytes((short)address));
            list.AddRange(HyValueHelper.Instance.GetBytes((short)value));
            bool flag = this.Send(list.ToArray());
            byte[] result=null;
            if(flag) {
                Thread.Sleep(30);
                result = this.Receive();
            } 
            return result;
        }

        public byte[] WriteMultipleCoils(ushort start_address,bool[] values) {
            byte[] result=null;
            bool flag3 = values.Length > 1968;
            if(flag3) {
                return  null;
            } 
                byte b = (byte)(values.Length / 8 + ((values.Length % 8 == 0) ? 0 : 1));
                ushort message_len = (ushort)(7 + b);
                byte[] array = new byte[(int)b];
                BitArray bitArray = new BitArray(values);
                bitArray.CopyTo(array,0);
                byte[] array2 = Util.BuildMBAPHeader(this._identifier,message_len);
                List<byte> list = new List<byte>();
                list.Add(15);
                list.AddRange(HyValueHelper.Instance.GetBytes(start_address));
                list.AddRange(HyValueHelper.Instance.GetBytes((ushort)values.Length));
                list.Add(b);
                list.AddRange(array);
                bool flag4 = this.Send(list.ToArray());
                if(flag4) {
                    Thread.Sleep(30);
                    result = this.Receive();
                } 
            


            return result;
        }

        public byte[] MaskWriteRegister(ushort address,ushort and_mask,ushort or_mask) {
            ushort message_len = 8;
            byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
            List<byte> list = new List<byte>();
            list.AddRange(collection);
            list.Add(22);
            list.AddRange(HyValueHelper.Instance.GetBytes((short)address));
            list.AddRange(HyValueHelper.Instance.GetBytes(and_mask));
            list.AddRange(HyValueHelper.Instance.GetBytes(or_mask));
            bool flag = this.Send(list.ToArray());
            byte[] result=null;
            if(flag) {
                Thread.Sleep(30);
                result = this.Receive();
            } 
            return result;
        }

        public byte[] WriteMultipleRegisters(ushort start_address,ushort[] values) {
            byte[] result=null;
            bool flag3 = values.Length > 123;
            if(flag3) {
              return  null;
            } 
                ushort message_len = (ushort)(7 + values.Length * 2);
                byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
                List<byte> list = new List<byte>();
                list.AddRange(collection);
                list.Add(16);
                list.AddRange(HyValueHelper.Instance.GetBytes((short)start_address));
                list.AddRange(HyValueHelper.Instance.GetBytes((short)values.Length));
                list.Add((byte)(values.Length * 2));
                for(int i = 0;i < values.Length;i++) {
                    list.AddRange(HyValueHelper.Instance.GetBytes(values[i]));
                }
                bool flag4 = this.Send(list.ToArray());
                if(flag4) {
                    Thread.Sleep(30);
                    result = this.Receive();
                }
            return result;
        }

        public byte[] ReadWriteMultipleRegisters(ushort read_start_address,ushort read_len,ushort write_start_address,ushort[] write_values) {
            byte[] result=null;
            bool flag3 = read_len > 125 || write_values.Length > 121;
            if(flag3) {
               return null;
            }
                ushort message_len = (ushort)(11 + write_values.Length * 2);
                byte[] collection = Util.BuildMBAPHeader(this._identifier,message_len);
                List<byte> list = new List<byte>();
                list.AddRange(collection);
                list.Add(23);
                list.AddRange(HyValueHelper.Instance.GetBytes(read_start_address));
                list.AddRange(HyValueHelper.Instance.GetBytes(write_start_address));
                list.AddRange(HyValueHelper.Instance.GetBytes((ushort)write_values.Length));
                list.Add((byte)(write_values.Length * 2));
                for(int i = 0;i < write_values.Length;i++) {
                    list.AddRange(HyValueHelper.Instance.GetBytes(write_values[i]));
                }
                bool flag4 = this.Send(list.ToArray());
                if(flag4) {
                    Thread.Sleep(30);
                    result = this.Receive();
                }


            
            return result;
        }

        
    }
}
