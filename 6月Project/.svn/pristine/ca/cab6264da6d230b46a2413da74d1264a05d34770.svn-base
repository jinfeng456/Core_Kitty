using System;
using System.Collections.Generic;

using GK.WCS.Common;

using GK.WCS.Common.task;
using GK.WCS.Carrier;
using CMNetLib.Robots.CarrierChain;
using GK.WCS.Common.core.dto;
using CMNetLib.Robots.Crane;
using GK.WCS.Entity;
using GK.WCS.DAL;

namespace GK.WCS.Open.http.server {

    public class CarrierData {
        public Dictionary<int,HyMachineState> machineState
        {get;set;
        }

        public Dictionary<int,HySignalState> SignalStates
        {
            get; set;
        }

        public TaskCarrier selectTask
        {
            get; set;
        }

        

    }
   public class CarrierServer:BaseServer {
        ///Carrier/reflash/1/
        public CarrierData reflash(List<String> param) {
            int plcId = int.Parse(param[0]);
            CarrierData d = new CarrierData();
            d.machineState = CarrierPool.instance.MachineStates[plcId];
            d.SignalStates = CarrierPool.instance.SignalStates[plcId];
            if(param.Count > 1) {
                int taskNo = int.Parse(param[1]);
                if(taskNo > 10000000) {

                    ITaskCarrierServer taskCarrierServer = ServerFactray.getServer<ITaskCarrierServer>();
                    d.selectTask = taskCarrierServer.getCarrarTasksByTaskNo(taskNo);
                }
            }
            
            return d;
        }

        ///Carrier/clearAction/plcId/path
        public String clearAction(List<String> param) {
            
            int plcId = int.Parse(param[0]);
            ushort path = ushort.Parse(param[1]);
            string info = "wcs删除任务" + path;

            
            HySignalState ss = CarrierPool.getSs(plcId,path);
            if(ss == null || ss.TaskNo < 1) {
                LoggerCommon.fileAll("传输线无任务" + path);
                return path + "无任务";
            }

            CarrierWriteConnect connect = TaskPool.get<CarrierWriteConnect>(plcId);

            if(connect.clearAction(path,ss.TaskNo)) {
                LoggerCommon.fileAll(info + "成功！");

            } else {
                LoggerCommon.fileAll(info + "失败");
            }
            return "";
        }
     
       
        ///Carrier/resetAction/path
        public String resetAction(List<String> param) {
            int plcId = int.Parse(param[0]);
            ushort path = ushort.Parse(param[1]);
            string info = "wcs复位" + path;

            string err = "";
            CarrierWriteConnect connect =TaskPool.get<CarrierWriteConnect>(plcId);

            //connect.resetAction(path,ref err);
            LoggerCommon.fileAll(info + "完成！");

            return "";
        }

       



    
}

}
