

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using CMFrameWork.Common;
using CMNetLib.ModBus;
using CMNetLib.ModBus.IO;
using CMNetLib.Robots.Crane;
using CMNetLib.Robots.Crane.CLBE_Pallet_V2;
using GK.WCS.Common;
using GK.WCS.Common.dll;
using GK.WCS.Common.Interface;
namespace GK.WCS.Crane {
    public abstract class CraneConnect:RegistersModbusTcpConnect {

        protected int CraneId;
        public int ForkNos = 1;

        public CraneConnect(int id,int ForkNos) {
            this.CraneId = id;
     
            this.ForkNos = ForkNos;
        }

        
        public void EmergencyStop(RobotMode mode) {
            LoggerCommon.fileAll(CraneId + "急停" + mode);
            ushort[] expr_12 = new ushort[2];
            expr_12[0] = BitConverter.ToUInt16(new byte[]
            { 255, (byte)mode },0);
            ushort[] values = expr_12;

            write((ushort)((int)CraneReader.TASK_SINGLE_LEN * this.ForkNos + 1),values,"急停");

        }


        public void SwtichMode(RobotMode mode) {
            LoggerCommon.fileAll(CraneId + "切换模式" + mode);
            RobotStatus rs = CranePool.instance.get(CraneId);
            bool flag2 = string.IsNullOrEmpty(CraneTools.CheckRobot(rs)) && CranePool.instance.get(CraneId).Cranestatus != CraneStatus.Manual;
            if(flag2) {
                IEnumerable<TaskStatusModel> arg_88_0 = rs.TaskState;
                int num = 0;
                foreach(TaskStatusModel model in arg_88_0) {
                    TaskStatusModel r = model;
                    if(r.State == CMNetLib.Robots.Crane.TaskStatus.UNLOADED || r.State == CMNetLib.Robots.Crane.TaskStatus.INIT || r.State == CMNetLib.Robots.Crane.TaskStatus.SEMIAUTO_COMPLETE) {
                        num++;
                    }
                }

                bool flag3 = num != this.ForkNos;
                if(flag3) {

                    return;
                }
            }


            bool flag4 = mode > RobotMode.FULLY_AUTO;
            if(flag4) {
                byte b = 0;
                bool flag5 = mode == RobotMode.MANUAL;
                if(flag5) {
                    b = 1;
                }
                write((ushort)((int)CraneReader.TASK_SINGLE_LEN * this.ForkNos + 1),BitConverter.ToUInt16(new byte[]
                {
                            b,
                            (byte)mode
                },0),"切换模式");
            } else {
                ushort[] values = new ushort[2];
                write((ushort)((int)CraneReader.TASK_SINGLE_LEN * this.ForkNos + 1),values,"切换模式");
            }
        }



        public bool SendTask(TaskModel task) {
            string info = CraneId + "号垛机" + task.SMATCode + "" + task.TaskNo + " X:" + task.X + "Y:" + task.Y  + "TargetForkDir:" + task.TargetForkDir + "Thickness:" + task.Thickness+ "ForkNo:"+task.ForkNo;
            LoggerCommon.fileAll(info);
            String error = "";
            bool blResult = sendTask_s(task,ref error);
            if(!String.IsNullOrEmpty(error)) {
                LoggerCommon.fileAll(error);
            }
            if(!blResult) {
                LoggerCommon.fileAll("垛机发送失败");
            }
            return blResult;
        }

        public bool isTaskBusy(int forkNo) {
            List<TaskStatusModel> TaskStates = CranePool.instance.get(CraneId).TaskState;
            if(forkNo != 0) {
                TaskStatusModel r = TaskStates[forkNo - 1];
                return !CraneTools.taskIdle(r);
            } else {
                foreach(TaskStatusModel r in TaskStates) {
                    if(CraneTools.taskIdle(r)) {
                        return false;
                    }

                }
            }

            return true;

        }







        /// <summary>
        /// 清除任务同时清空下位机货叉任务状态
        /// </summary>
        /// <param name="ForkNo"></param>
        /// <returns></returns>
        public bool ClearTaskState(ushort ForkNo = 1) {
            ushort value = BitConverter.ToUInt16(new byte[]
               {
                    (byte)ForkNo,
                    1
               },0);

            write((ushort)((int)CraneReader.TASK_SINGLE_LEN * this.ForkNos),value,CraneId + "清除任务" + ForkNo);


            return true;
        }

        public void reset() {
            if(!CranePool.instance.isFault(CraneId)) {
                return;
            }
            LoggerCommon.fileAll(CraneId + "reset");
            RobotStatus rs= CranePool.instance.get(CraneId);
           
            ushort[] values = new ushort[] {
                    BitConverter.ToUInt16(new byte[]
                    {
                        (byte)ManualActionCode.RESET,
                         (byte) rs.Mode
                    }, 0)
                    //, num
            };
            write((ushort)((int)CraneReader.TASK_SINGLE_LEN * this.ForkNos + 1),values,"手动");
        }
        public void manualAction(ManualActionCode action,int forks,ushort num) {


            if(action == ManualActionCode.WALKING_FORWARD || action == ManualActionCode.WALKING_REVERSE || action == ManualActionCode.LIFT_DOWN || action == ManualActionCode.LIFT_UP) {
                num = num > 200 ? num = 200 : num;
                num = (ushort)(num * 16384 / 1500);
            }
            LoggerCommon.fileAll(CraneId + "手动." + action);
            RobotStatus rs = CranePool.instance.get(CraneId);
            bool flag = action == ManualActionCode.EMERGENCY_STOP || rs.IsSystemManual;
            ;
            if(flag) {
                ushort[] values = new ushort[]
                {
                        BitConverter.ToUInt16(new byte[]
                        {
                            (byte)action,
                            1
                        }, 0)
                        //, num
                };

                write((ushort)((int)CraneReader.TASK_SINGLE_LEN * this.ForkNos + 1),values,"手动");

            }


        }
       

        private bool sendTask_s(TaskModel task,ref string err2) {

            List<ushort> list = new List<ushort>();
            list.Add(HyValueHelper.Instance.GetUShort(new byte[]
            {
                        (byte)task.Forkdir,
                        (byte)task.TargetForkDir
            }));
            list.Add(HyValueHelper.Instance.GetUShort(new byte[]
            {
                        (byte)task.Fork_Pick_Distance,
                        (byte)task.Fork_Drop_Distance
            }));
            list.Add((ushort)task.Thickness);
            list.AddRange(Tools.Int2Short(task.X));
            list.AddRange(Tools.Int2Short(task.Y));
            list.AddRange(Tools.Int2Short(task.TargetX));
            list.AddRange(Tools.Int2Short(task.TargetY));
            list.AddRange(Tools.Int2Short(task.TaskNo));
            list.Add(HyValueHelper.Instance.GetUShort(new byte[]
            {
                        task.IsIn,
                        (byte)task.SMATCode
            }));

            ushort start_address = (ushort)(CraneReader.TASK_SINGLE_LEN * (task.ForkNo - 1));
            write(start_address,list.ToArray(),"垛机写入");
            return true;
        }




    }
}
