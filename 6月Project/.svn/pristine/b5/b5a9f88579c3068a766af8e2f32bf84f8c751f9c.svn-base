

using System.Collections.Generic;
using System.Threading;
using CMNetLib.Robots.Crane;
using GK.WCS.DAL;
using GK.WCS.Entity;
using GK.WCS.Common;
using GK.WCS.Common.task;
using GK.WCS.Crane.dto;

namespace GK.WCS.Crane {
    public abstract class CraneAllocateJobHX:ZtTask {

        protected ITaskCarrierServer carrierDAL = ServerFactray.getServer<ITaskCarrierServer>();
        protected ITaskCraneServer craneTaskDAL = ServerFactray.getServer<ITaskCraneServer>();

        protected IRTConfigServer rTConfigServer = ServerFactray.getServer<IRTConfigServer>();

        protected CraneConnect connect = null;
        protected RobotStatus status;
        protected  long lastOutTime = 0;
        protected int CraneId;
      


        public CraneAllocateJobHX(int id) {
            this.CraneId = id;
            time = 800;
        }
        public override bool init() {
            base.init();
            connect = (CraneConnect)TaskPool.get<CraneConnect>(CraneId);
            return true;
        }
        public override long oneMaxTime() {
            return 12000;//每次成功sleep10秒
        }

        public override void onlyOneTime() {
         

        
    }
        public override void excute() {
            status = CranePool.instance.get(CraneId);
            int lastTime = CranePool.instance.isDelay(CraneId);
            if(lastTime>1500) {
                LoggerCommon.fileAll(CraneId + "通讯延时"+ lastTime + "毫秒，等待垛机状态");
                return;
            }

            if(!checkCrane()) {
                return;
            }
            if(!chechModeDB()) {
                return;
            }
            TaskModel tc = analyseTaskModel();

            if(tc != null) {
                DoOutAndShiftTask(tc);
            } else {
                tc = preExecution();
                if(tc != null) {
                    DoOutAndShiftTask(tc);
                } else {
                    LoggerCommon.consol(CraneId + "号垛机空闲");
                }
        
                
            }
        }
        /**
        * 任务不能立刻完成必须，需要预先执行的部分
        */
        public abstract TaskModel preExecution();
        /**
         * 
         * can worked finsh not Occupy the crane
         * */
        abstract public TaskModel analyseTaskModel();
        public  bool chechModeDB() {
            /*RTConfig RTConfig = rTConfigServer.GetRTConfig(CraneId);
            if(3 != RTConfig.Cranestatus) {
                LoggerCommon.consol(CraneId + "非全自动模式");
                return false;
            }
            int val = RTConfig.Overstop;
            if(val == 1) {
                LoggerCommon.consol(CraneId + "号垛机循环停止");
                return false;
            }
            */
            return true;
        }   

        protected bool checkCrane() {
            if(CranePool.instance.isFault(CraneId)) {
                LoggerCommon.consol(CraneId + "垛机错误!请在堆垛机控制台，继续分配任务");
                return false;
            }

            if(!string.IsNullOrEmpty(CranePool.instance.getWarning(CraneId))) {
                LoggerCommon.consol(CraneId + "号垛机警告：" + CranePool.instance.getWarning(CraneId));
                return false;
            }
            //判断堆垛机是否处于空闲状态ss
            if(!CranePool.instance.isAuto(CraneId)) {
                LoggerCommon.consol(CraneId + "堆垛机非自动");
                return false;
            }
            if(connect.isTaskBusy(0)) {
                LoggerCommon.consol(CraneId + "号垛机任务全速运行");
                return false;
            }
            return true;
        }

       
        public bool DoOutAndShiftTask(TaskModel taskModel) {
            if(connect.SendTask(taskModel)) {
                Thread.Sleep(2000);
                return true;
            } else {
                LoggerCommon.fileAll(string.Format("堆垛机{0}出库任务发送不成功" + taskModel.TaskNo,CraneId));
                return false;
            }
   
          
        }
        public List<FullTask> getCanWorkingData() {
            List<TaskCrane> list = craneTaskDAL.getTaskCraneByCraneId(CraneId);
            List<FullTask> res = TaskStatusUtil.buildFullTask(list);


            removeDbUnWork(res);
            List<FullTask> removeList = willRemove(res);
            foreach(FullTask ft in removeList) {
                if(res.Contains(ft)) {
                    res.Remove(ft);
                }
            }
            return res;
        }

        void simpleDelete(List<FullTask> res) {
            List<TaskRely> relyList = craneTaskDAL.getAllTaskRely();
            Dictionary<long,long> dict = new Dictionary<long,long>();
            foreach(TaskRely rely in relyList) {
                if(!dict.ContainsKey(rely.taskId)) {
                    dict.Add(rely.taskId,rely.relyId);
                }
            }

            Dictionary<long,bool> putStatus = new Dictionary<long,bool>();
            foreach(FullTask ft in res) {
                if( !CraneTools.isFinsh(ft.put)) {//出库完成直接删除
                    if(!putStatus.ContainsKey(ft.put.id)) {
                        putStatus.Add(ft.put.id,true);

                    }
                } 
            }
            List<FullTask> removeList = new List<FullTask>();
            foreach(FullTask ft in res) {
                long id = ft.pick.id;
                if(dict.ContainsKey(id)) {
                    if(putStatus.ContainsKey(dict[id])) {
                        removeList.Add(ft);
                    }
                }

            }

            foreach(FullTask ft in removeList) {
                if(res.Contains(ft)) {
                    res.Remove(ft);
                }
            }

        }
        void removeDbUnWork(List<FullTask> res) {
            simpleDelete(res);
            List<FullTask> removeList = new List<FullTask>();
            foreach(FullTask ft in res) {
                if(CraneTools.isFinsh(ft.put)) {//出库完成直接删除
                    removeList.Add(ft);
                } else if(hasRely(ft.pick)) {//取货有依赖
                    removeList.Add(ft);
                }
            }

            foreach(FullTask ft in removeList) {
                if(res.Contains(ft)) {
                    res.Remove(ft);
                }
            }
        }
        /***
         * 
         * 放货完成的，与有依赖的都删除
         * */
        public virtual List<FullTask> willRemove(List<FullTask> res) {
            List<FullTask> removeList = new List<FullTask>();
            return removeList;
        }
        private bool hasRely(TaskCrane lastTask) {
            if(lastTask == null) {
                return true;
            }
            List<TaskRely> relyList = craneTaskDAL.getTaskRely(lastTask.id);
            foreach(TaskRely rely in relyList) {
                if(rely.relyName == "crane") {
                    TaskCrane crane = craneTaskDAL.getTaskCraneById(rely.relyId);
                    if(!CraneTools.isFinsh(crane)) {
                        return true;
                    }
                } else if(rely.relyName == "carrier") {
                    TaskCarrier carrier = carrierDAL.getById<TaskCarrier>(rely.relyId);
                    if(carrier != null && carrier.status>1) {
                        return true;
                    }
                }
               
            }
            return false;
        }

    }
}
