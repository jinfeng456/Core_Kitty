using Dapper;
using GK.Common.trans;
using GK.Engine.WMS.wms;
using GK.Mongon;
using GK.WMS.DAL;
using GK.WMS.Entity;
using GK.WMS.Entity.wms;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace GK.Engine.WMS
{
    public class SyncWcsReultEngine : WmsBaseEngine
    {
        public CoreTaskParam coreTaskParam = null;
        public long taskId;
        public int taskStatus;
        ISequenceIdServer sequenceIdServer = WMSDalFactray.getDal<ISequenceIdServer>();
        IItemServer itemServer = WMSDalFactray.getDal<IItemServer>();
        //入库完成反馈
        protected override bool Execute(IDbConnection connection, IDbTransaction transaction)
        {
            int taskType=GetCoreTask(connection, transaction,taskId)[0].taskType;
            if (taskType == 1)
            {
                InStock(connection, transaction);
            }
            else if(taskType == 2)
            {
                OutStock(connection, transaction);
            }          
            return true;
        }
        #region 入库完成和删除
        //入库逻辑方法
        public bool InStock(IDbConnection Connection, IDbTransaction transaction)
        {
            long receiptInId = 0;
            long soId = 0;
            string wmsBanchNo;
            int count = 0;
            long locId = 0;
            int loccount = 0;
            int taskCount = 0;
            int stockCount = 0;
            List<CoreTask> listTask = GetCoreTask(connection, transaction, taskId);
            List<CoreTaskParam> listTaskParam = GetCoreTaskParam(connection, transaction, taskId);
            if (listTask.Count<1) {
                MessagelogUtil.savelog(taskStatus + " 该任务不存在!");
                return false;
            }
            if (taskStatus == -1)
            {
                UpdataStockNo(connection, transaction, listTask[0].stockId, 0);
                for (int i = 0; i < listTaskParam.Count; i++)
                {
                    UpdataStockDetailNo(connection, transaction, listTaskParam[i].detailId, 0);
                }
                return true;
            }
            else if (taskStatus == 3)
            {
                UpdataTask(connection, transaction, taskId, 4);
                UpdataStock(connection, transaction, listTask[0].stockId, 2);
                List<CoreStock> liststock = GetCoreStock(connection, transaction, listTask[0].stockId);
                long stockId = liststock[0].id;
                List<CoreStockDetail> list = GetCoreStockDetail(connection, transaction, stockId);
                if (list.Count!= 1)
                {
                    MessagelogUtil.savelog(taskStatus + " 任务中托盘只能存放一种物料!");
                    return false;
                }
                else
                {
                   
                        wmsBanchNo = list[0].wmsBanchNo;
                        count = int.Parse(list[0].countDb.ToString());
                        //根据内部批次号查找批次
                       List<WhBatch> batchList = GetWhbatch(connection, transaction, wmsBanchNo);
                    if (batchList.Count == 1)
                    {
                        UpdataBatchCount(connection, transaction, wmsBanchNo, count);
                        UpdataStockDetail(connection, transaction, liststock[0].id, 2);
                        receiptInId = long.Parse(list[0].receiptlnId.ToString());
                        UpdataReceiptDetail(connection, transaction, receiptInId, count);
                        UpdataStockDetailBatchID(connection, transaction, liststock[0].id, batchList[0].id);
                        return true;
                    }
                    else if (batchList.Count == 0)
                    {
                        WhBatch whBatch = new WhBatch();
                        whBatch.id = sequenceIdServer.getId();
                        long batchId = whBatch.id;
                        whBatch.itemId = long.Parse(list[0].itemId.ToString());
                        CoreItem coreItem = itemServer.FindCoreItemById(long.Parse(list[0].itemId.ToString()));
                        whBatch.itemName = coreItem.name;
                        whBatch.itemType = coreItem.classifyId;
                        whBatch.count = count;
                        whBatch.batchNo = wmsBanchNo;
                        whBatch.businessStatus = 1;
                        whBatch.frozen = 0;
                        whBatch.type = 1;
                        connection.InsertNoNull(whBatch, transaction);
                        UpdataStockDetail(connection, transaction, liststock[0].id, 2);
                        receiptInId = long.Parse(list[0].receiptlnId.ToString());
                        UpdataReceiptDetail(connection, transaction, receiptInId, count);
                        UpdataStockDetailBatchID(connection, transaction, liststock[0].id, batchId);
                        return true;
                    }
                    else
                    {
                        MessagelogUtil.savelog(taskStatus + " 任务中批次不符合标准!");
                        return false;
                    }
                }
            }
            return true;
        }
        //根据入库任务的id来获取入库任务信息(taskStatus=3)
        public List<CoreTask> GetCoreTask(IDbConnection Connection, IDbTransaction transaction, long taskId)
        {
            String sql = @"select * from Core_task where id=@taskId ";
            List<CoreTask> list = Connection.Query<CoreTask>(sql, new { taskId = taskId }, transaction).ToList();
            return list;
        }
        //根据入库任务ID得到入库明细任务
        public List<CoreTaskParam> GetCoreTaskParam(IDbConnection Connection, IDbTransaction transaction, long taskId)
        {
            String sql = @"select * from Core_task_param where wms_task_id=@taskId ";
            List<CoreTaskParam> list = Connection.Query<CoreTaskParam>(sql, new { taskId = taskId }, transaction).ToList();
            return list;
        }
        //获取库存状态
        public List<CoreStock> GetCoreStock(IDbConnection Connection, IDbTransaction transaction, long id)
        {
            String sql = @"select * from core_stock where id=@id ";
            List<CoreStock> list = Connection.Query<CoreStock>(sql, new { id = id }, transaction).ToList();
            return list;
        }
        //根据货位号查询库存数量
      
        //根据货位号和状态（状态不为4完成的）查询任务数量
       
        //根据库存明细id获取其他信息
        public List<CoreStockDetail> GetCoreStockDetail(IDbConnection Connection, IDbTransaction transaction, long id)
        {
            String sql = @"select * from core_stock_detail where stock_Id=@id ";
            List<CoreStockDetail> list = Connection.Query<CoreStockDetail>(sql, new { id = id }, transaction).ToList();
            return list;
        }
        //修改任务状态和完成时间
        public bool UpdataTask(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            string sql = @"update Core_task set Status=@status,finsh_Time=GETDATE() where id=@id";
            Connection.Execute(sql, new { id = id, status = status }, transaction);
            return true;
        }
        //修改任务明细状态和完成时间
        public bool UpdataTaskParam(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            string sql = @"update Core_task_param set Status=@status,finsh_Time=GETDATE() where id=@id";
            Connection.Execute(sql, new { id = id, status = status }, transaction);
            return true;
        }
        //修改库存状态(2)和时间
        public bool UpdataStock(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            string sql = @"update Core_stock set Status=@status,change_Time=GETDATE() where id=@id";
            Connection.Execute(sql, new { id = id, status = status }, transaction);
            return true;
        }
        //修改库存明细状态(2)和时间
        public bool UpdataStockDetail(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            string sql = @"update core_stock_detail set stock_Status=@status,in_Time=GETDATE() where stock_id=@id";
            Connection.Execute(sql, new { id = id, status = status }, transaction);
            return true;
        }
        //修改库存状态(0)和时间
        public bool UpdataStockNo(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            string sql = @"update Core_stock set Status=status,change_Time=GETDATE() where id=@id";
            Connection.Execute(sql, new { id = id, status = status }, transaction);
            return true;
        }
        //修改库存明细状态(0)和时间
        public bool UpdataStockDetailNo(IDbConnection Connection, IDbTransaction transaction, long stockId, int status)
        {
            string sql = @"update core_stock_detail set stock_Status=@status,in_Time=GETDATE() where stock_Id=@stockId";
            Connection.Execute(sql, new { stockId = stockId, status = status }, transaction);
            return true;
        }
        //修改库存明细中批次ID
        public bool UpdataStockDetailBatchID(IDbConnection Connection, IDbTransaction transaction, long stockId, long batchId)
        {
            string sql = @"update core_stock_detail set batch_Id=@batchId where stock_Id=@stockId";
            Connection.Execute(sql, new { stockId = stockId, batchId = batchId }, transaction);
            return true;
        }
        //通过入库单ID修改数量
        public bool UpdataReceiptDetail(IDbConnection Connection, IDbTransaction transaction, long receiptId, int count)
        {
            string sql = @"update Wh_Receipt_in_detail set finsh_Count=@count where id=@receiptId";
            Connection.Execute(sql, new { receiptId = receiptId, count = count }, transaction);
            return true;
        }
        //通过入库单Id修改入库单状态和完成时间(3)
        public bool UpdataWhReceiptIn(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            string sql = @"update Wh_Receipt_in set Status=@status,finsh_Time=GETDATE() where id=@id";
            Connection.Execute(sql, new { id = id, status = status }, transaction);
            return true;
        }     
        //根据批次号查找批次信息
        public List<WhBatch> GetWhbatch(IDbConnection Connection, IDbTransaction transaction,string batchNo)
        {
            String sql = @"select * from wh_batch where batch_No=@batchNo ";
            List<WhBatch> list = Connection.Query<WhBatch>(sql, new { batchNo = batchNo }, transaction).ToList();
            return list;
        }
        //修改批次数量
        public bool UpdataBatchCount(IDbConnection Connection, IDbTransaction transaction, string batchNo, int count)
        {
            string sql = @"update wh_batch set count=count+@count where batch_No=@batchNo";
            Connection.Execute(sql, new { count = count, batchNo = batchNo }, transaction);
            return true;
        }
        //修改货位数量
       
        #endregion
        #region 出库完成和删除
        //出库完成逻辑
        public bool OutStock(IDbConnection Connection, IDbTransaction transaction)
        {
            long receiptOutId = 0;
            long soId = 0;
            long batchId = 0;
            int count = 0;
            long locId = 0;
            int loccount = 0;
            int taskCount = 0;
            int stockCount = 0;
            List<CoreTask> listTask = GetCoreTask(connection, transaction, taskId);
            List<CoreStock> liststock = GetCoreStock(connection, transaction, listTask[0].stockId);
            long stockId = liststock[0].id;
            List<CoreStockDetail> list = GetCoreStockDetailOut(connection, transaction, stockId);
            if (list.Count==0)
            {
                return false;
            }
            count = int.Parse(list[0].countDb.ToString());
            if (list.Count != 1)
            {
                MessagelogUtil.savelog(" 不符合要求!");
                return false;
            }
            else
            {
                if (taskStatus == -1)
                {
                    UpdataStockOut(connection, transaction, listTask[0].stockId, 2);
                    UpdataStockDetailOut(connection, transaction, listTask[0].stockId, 2);
                }
                else if (taskStatus == 3)
                {
                    UpdataTask(connection, transaction, taskId, 4);
                    UpdataStockOut(connection, transaction, listTask[0].stockId, -1);
                    UpdataStockDetailOut(connection, transaction, listTask[0].stockId, -1);
                    locId = long.Parse(GetCoreStock(connection, transaction, listTask[0].stockId)[0].locId.ToString());
                
                    loccount = stockCount + taskCount;
                    string batchNo= list[0].wmsBanchNo;
                    UpdataBatchCountOut(connection, transaction, batchNo, count);
                    CommentFunction.UpdataWhLoc(connection, transaction, locId);
             
                    UpdataWhReceiptDetailOut(connection, transaction, long.Parse(list[0].receiptlOutId.ToString()), count);
                    int listcount= getDetailOut(connection, transaction, long.Parse(list[0].receiptlOutId.ToString())).Count;
                    int finsh = getStockCounts(connection, transaction, long.Parse(list[0].receiptlOutId.ToString())).Count;
                    if (listcount== finsh) {
                    UpdataWhReceiptOut(connection, transaction, long.Parse(list[0].receiptlOutId.ToString()),3);
                    }
                    List<WhSoOutDetail> listAllSoOut = getAllSoDetailOut(connection, transaction);
                    int sum = 0;
                    List<WhReceiptOutDetail> listReDetail = getDetailOut(connection, transaction, long.Parse(list[0].receiptlOutId.ToString()));
                    if (listReDetail.Count == 0)
                    {
                        return false;
                    }
                    else
                    {
                        for (int i = 0; i < listReDetail.Count; i++)
                        {
                            List<WhSoOutDetail> listSoDetailOut = getSoDetailOut(connection, transaction, listReDetail[i].soDetailId);
                            if (listSoDetailOut.Count > 0 && listReDetail[i].finshCount == listSoDetailOut.Count)
                            {
                                sum += 1;
                            }
                        }
                        List<WhSoOutDetail> listSoDetailOut1 = getSoDetailOut(connection, transaction, listReDetail[0].soDetailId);
                        if (listSoDetailOut1.Count>0 && sum== listAllSoOut.Count) {
                            UpdataWhSoOut(connection, transaction, listSoDetailOut1[0].soid);                            
                        }
                    }
                    }
                return true;
            }
        }
        //修改库存明细状态(0)和时间
        public bool UpdataStockDetailOut(IDbConnection Connection, IDbTransaction transaction, long stockId, int status)
        {
            string sql = @"update core_stock_detail set stock_Status=@status,out_Time=GETDATE() where stock_Id=@stockId and stock_Status=3";
            Connection.Execute(sql, new { stockId = stockId, status = status }, transaction);
            return true;
        }
        //通过出库单Id修改出库单状态和完成时间(3)
        public bool UpdataWhReceiptOut(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            String sql = @"select * from Wh_Receipt_out_detail where id=@id ";
            List<WhReceiptOutDetail> list = Connection.Query<WhReceiptOutDetail>(sql, new { id = id }, transaction).ToList();
            long receiptId = long.Parse(list[0].receiptId.ToString());
            string sql1 = @"update Wh_Receipt_out set Status=@status,finsh_Time=GETDATE() where id=@receiptId";
            Connection.Execute(sql1, new { receiptId = receiptId, status = status }, transaction);
            return true;
        }
        //修改库存状态(0)和时间
        public bool UpdataStockOut(IDbConnection Connection, IDbTransaction transaction, long id, int status)
        {
            string sql = @"update Core_stock set Status=@status,change_Time=GETDATE() where id=@id and Status=3";
            Connection.Execute(sql, new { id = id, status = status }, transaction);
            return true;
        }
        //根据库存明细id获取其他信息
        public List<CoreStockDetail> GetCoreStockDetailOut(IDbConnection Connection, IDbTransaction transaction, long id)
        {
            String sql = @"select * from core_stock_detail where stock_Id=@id and stock_status=3 ";
            List<CoreStockDetail> list = Connection.Query<CoreStockDetail>(sql, new { id = id }, transaction).ToList();
            return list;
        }
        //获取库存明细中状态为2的数量
        public bool getStockCount(IDbConnection Connection, IDbTransaction transaction,long stockId) {
            String sql = @"select * from core_stock_detail where stock_Status=2 and stock_Id=@stockId ";
            List<CoreStockDetail> list = Connection.Query<CoreStockDetail>(sql, new { stockId = stockId }, transaction).ToList();
            if (list.Count > 0) {
                return false;
            }
            else {
                return true;
            }
        }
        //修改批次数量
        public bool UpdataBatchCountOut(IDbConnection Connection, IDbTransaction transaction, string batchNo, int count)
        {
            string sql = @"update wh_batch set count=count-@count where batch_No=@batchNo";
            Connection.Execute(sql, new { count = count, batchNo = batchNo }, transaction);
            return true;
        }
        //修改货位数量
     
        //修改出库单明细数量
        public bool UpdataWhReceiptDetailOut(IDbConnection Connection, IDbTransaction transaction, long id, int count)
        {
            string sql = @"update Wh_Receipt_out_detail set finsh_Count=@count where id=@id";
            Connection.Execute(sql, new { id = id, count = count }, transaction);
            return true;
        }
        //查询完成数量和计划数量一致的明细条数
        public List<WhReceiptOutDetail> getStockCounts(IDbConnection Connection, IDbTransaction transaction, long id)
        {
            String sql = @"select * from Wh_Receipt_out_detail where id=@id ";
            List<WhReceiptOutDetail> list = Connection.Query<WhReceiptOutDetail>(sql, new { id = id }, transaction).ToList();
            long receiptId = long.Parse(list[0].receiptId.ToString());
            String sql1 = @"select count(*) from Wh_Receipt_out_detail where plan_Count=finsh_Count and receipt_Id=@receiptId ";
            List<WhReceiptOutDetail> list1 = Connection.Query<WhReceiptOutDetail>(sql1, new { receiptId = receiptId }, transaction).ToList();
            return list1;
        }
        //通过receiptid获取明细
        public List<WhReceiptOutDetail> getDetailOut(IDbConnection Connection, IDbTransaction transaction, long id)
        {
            String sql = @"select * from Wh_Receipt_out_detail where id=@id ";
            List<WhReceiptOutDetail> list = Connection.Query<WhReceiptOutDetail>(sql, new { id = id }, transaction).ToList();
            long receiptId = long.Parse(list[0].receiptId.ToString());
            String sql1 = @"select * from Wh_Receipt_out_detail where receipt_Id=@receiptId ";
            List<WhReceiptOutDetail> list1 = Connection.Query<WhReceiptOutDetail>(sql1, new { receiptId = receiptId }, transaction).ToList();
            return list1;
        }
        //通过出库单明细查找对应的出库订单明细
        public List<WhSoOutDetail> getSoDetailOut(IDbConnection Connection, IDbTransaction transaction, long id)
        {
            String sql = @"select * from Wh_So_out_detail where id=@id ";
            List<WhSoOutDetail> list = Connection.Query<WhSoOutDetail>(sql, new { id = id }, transaction).ToList();
            return list;
        }
        //查询所有出库单明细
        public List<WhSoOutDetail> getAllSoDetailOut(IDbConnection Connection, IDbTransaction transaction)
        {
            String sql = @"select * from Wh_So_out_detail ";
            List<WhSoOutDetail> list = Connection.Query<WhSoOutDetail>(sql,new { }, transaction).ToList();
            return list;
        }
        //修改出库订单状态和完成时间
        public bool UpdataWhSoOut(IDbConnection Connection, IDbTransaction transaction, long id)
        {
            string sql = @"update Wh_so_out set status=2 and finsh_Date=GETDATE() where id=@id";
            Connection.Execute(sql, new { id = id}, transaction);
            return true;
        }
        #endregion
    }
}
