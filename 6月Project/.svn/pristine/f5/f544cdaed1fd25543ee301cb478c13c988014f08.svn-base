
using System.Collections.Generic;
using CMNetLib.Robots.Crane;
using GK.WCS.Entity;
using GK.WCS.Carrier;
using GK.WCS.Common.core.dto;
using GK.WCS.Crane.dto;

namespace GK.WCS.Crane {
    public abstract class CraneDoubleForkCarrierJobHX:CraneDoubleForkTask {

        public CraneDoubleForkCarrierJobHX(int id) :base(id) {
        }

        public abstract List<int> outPointLeft();
        public abstract List<int> outPointRight();
        public abstract int defoutPoint();
        public override TaskModel preExecution() {
            return null;
        }
        
        public override List<FullTask> willRemove(List<FullTask> allFtList) {
            List < FullTask > removeList = base.willRemove(allFtList);

            removeIn(allFtList,removeList);
            List<int> outList = new List<int>();
            outList.AddRange(outPointRight());
            outList.AddRange(outPointLeft());
            foreach(int point in outList) {
                int shelfid = (37 - point % 1000 / 10) / 2;
                HySignalState s1 = CarrierPool.getSs(point);

                if(s1==null||!s1.isIdle()) {
                    foreach(FullTask ft in allFtList) {
                        if(ft.pick.type == 2 && ft.pick.locId / 1000000 == shelfid) {
                            if(!removeList.Contains(ft)) {
                                removeList.Add(ft);
                            }
                        }
                    }
                }
            }
            return removeList;
        }


        void removeIn(List<FullTask> allFtList,List<FullTask> removeList) {
            List<int> inTaskList = getCanInTasks();
            foreach(FullTask ft in allFtList) {
                if(ft.type == 1) {
                    if(ft.pick.Status == 1 && !inTaskList.Contains(ft.pick.TaskNo)) {//
                        removeList.Add(ft);//删除任务但是不在入库口的入库任务
                    }
                }
            }
        }
        List<int> getCanInTasks() {
            List<int> inList = inPoint();

            List<int> inTaskList = new List<int>();
            foreach(int point in inList) {
                HySignalState s1 = CarrierPool.getSs(point);
                if(s1 == null) {
                    continue;
                }
                if(s1.OnOff && s1.TaskNo > 0) {
                    inTaskList.Add(s1.TaskNo);
                }

            }
            return inTaskList;
        }
  
        /// <summary>
        /// 
        /// </summary>
        /// <param name="forkNo">货叉号</param>
        /// <param name="tc">当前任务</param>
        /// <param name="otherPutTc">另一个货叉任务</param>
        /// <returns></returns>
        public override int getPutPoint(int forkNo,TaskCrane tc,TaskCrane otherPutTc) {
            List<int> outList =null;
            if(tc.locDir == 1) {
                outList = this.outPointLeft();
            } else {
                outList = this.outPointRight();
            }
            
            HySignalState ssOut1 = CarrierPool.getSs(outList[0]);
            HySignalState ssOut2 = CarrierPool.getSs(outList[1]);
            if(forkNo == 2) {
                if(ssOut1.isIdle() && otherPutTc == null ) {//另一个货叉没有放货
                    return outList[0];
                } 
                if(ssOut2.isIdle()) {
                    return outList[1];
                }  
            } else {
                if(ssOut1.isIdle() && (otherPutTc == null || otherPutTc.locId != outList[0])) {
                    return outList[0];
                }
            }
            return 0;
        }

     

        public override ushort getPickForkNo(TaskCrane tc,List<TaskOrder> list,List<int> bastForkNo) {
            bool fork1CanPick = false;
            bool fork2CanPick = false;
            
            foreach(int forkNo in bastForkNo) {
                if(forkNo == 1) {
                    fork1CanPick = true;
                }
                if(forkNo == 2) {
                    fork2CanPick = true;
                }
            }
            if(tc.type == 1) {
                ushort fork =  inStockFork(fork1CanPick,fork2CanPick,tc);

                foreach(int forkNo in bastForkNo) {
                    if(forkNo == fork) {
                        return fork;
                    }
                   
                }

            }  else {
                return (ushort)bastForkNo[0];
            }

            return 0;
        }


        ushort outStockFork(bool fork1CanPick,bool fork2CanPick,TaskCrane tc,List<TaskOrder> list) {
            if(fork1CanPick && fork2CanPick && list != null) {//可以进行优化

                foreach(TaskOrder order in list) {
                    if(order.ft.pick.id != tc.id) {//找到另一个位置
                        if(order.ft.pick.locX > tc.locX) {//另一个更靠近出口
                            return 1;
                        } else {
                            return 2;
                        }
                    }

                }


            }
            if(fork2CanPick) {
                return 2;
            }

            if(fork1CanPick) {
                return 1;
            }
            return 0;

        }


        ushort inStockFork(bool fork1CanPick,bool fork2CanPick,TaskCrane tc) {
            List<int> inList = inPoint();
            foreach(int p in inList) {
                HySignalState ss1 = CarrierPool.getSs(p);
                if(tc.TaskNo != ss1.TaskNo) {
                    continue;
                }
                if(p / 1000 == 1) {//1号plc
                    if(p % 10 == 2) {//远离垛机
                        if(fork1CanPick) {
                            return 1;
                        } else {
                            return 0;
                        }
                    } else {//1号plc 货架近光电
                        if(fork2CanPick) {
                            return 2;
                        } else {
                            return 1;
                        }
                    }
                } else {//2号plc
                    if(p % 10 == 2) {//远离垛机
                        if(fork2CanPick) {
                            return 2;
                        } else {
                            return 0;
                        }
                    } else {//1号plc 货架近光电
                        if(fork1CanPick) {
                            return 1;
                        } else {
                            return 2;
                        }
                    }

                }
            }
            return 0;
        }
      
    }
}
