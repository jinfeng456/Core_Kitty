using System;
using System.Text;
using System.Linq;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Dapper;
using static Dapper.SqlMapper;
using GK.Common.dto;
using GK.Common;
using GK.WMS.DAL;
using GK.WMS.Common;

namespace GK.WCS.DAL {//
    public class BaseDAL
    {
        protected IDbConnection Connection
        {
            get { return DBUtils.CreateWMSConnection(WMSDalFactray.prefixal); }
        }
        protected Page<T> PageQuery<T>(string sql, int start, int end, string orderBy, SqlParameter[] parames)
        {
            if (string.IsNullOrEmpty(sql))
            {

                return null;
            }
            if ((start <= 0 && end <= 0))
            {

                return null;
            }
            StringBuilder strSql = new StringBuilder();
            StringBuilder strSqlCount = new StringBuilder();
            strSql.Append("SELECT * FROM ( ");
            strSql.Append(" SELECT ROW_NUMBER() OVER (");
            if (!string.IsNullOrEmpty(orderBy))
            {
                strSql.Append("order by T." + orderBy);

            }

            strSql.Append(")AS Row, T.*  from (");
            strSql.Append(sql);
            strSql.Append(")T ) TT");
            strSql.AppendFormat(" WHERE TT.Row>= {0} and  TT.Row<={1}  ORDER BY TT.Row ", start, end);
            strSqlCount.Append("select COUNT(*) FROM (" + sql + ") as t");



            GridReader ds = Connection.QueryMultiple(strSql.ToString() + ";" + strSqlCount.ToString());
            List<T> it = ds.Read<T>().ToList(); ;
            int count = ds.Read<int>().First();
            Page<T> page = new Page<T>();
            page.count = count;

            page.list = it;
            return page;


        }



    }
   
}
