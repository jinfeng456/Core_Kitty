using GK.WCS.Common;
using GK.WCS.Crane.enumerate;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace GK.WCS.Crane
{

    public class GkRSCraneStatus : GkCraneStatusBase
    {
        /**
         * 
         *   验证舵机状态*/
         public int stnId;
        public override bool checkCrane()
        {
         
            if (bLAuto == 0)
            {
                LoggerCommon.consol(stnId + "号垛机处于非自动模式");
                return true;
            }
            if (bLAlarm == 1)
            {
                LoggerCommon.consol(stnId + "号垛机处于报警状态");
                return true;
            }
            if (bLLoaded == 1)
            {
                LoggerCommon.consol(stnId + "号垛机处于有货物状态");
                return true;
            }
            if (bLForkZero == 0)
            {
                LoggerCommon.consol(stnId + "号垛机货叉不在原点位置");
                return true;
            }
            if (bLState == 1)
            {
                LoggerCommon.consol(stnId + "号垛机取货定位中");
                return true;
            }
            if (bLState == 2)
            {
                LoggerCommon.consol(stnId + "号垛机请求取货");
                return true;
            }
            if (bLState == 3)
            {
                LoggerCommon.consol(stnId + "号垛机取货中");
                return true;
            }
            if (bLState == 4)
            {
                LoggerCommon.consol(stnId + "号垛机取货完成放货定位中");
                return true;
            }
            if (bLState == 5)
            {
                LoggerCommon.consol(stnId + "号垛机放货中");
                return true;
            }
            if (bLState == 98)
            {
                LoggerCommon.consol(stnId + "号垛机维修");
                return true;
            }
            if (bLState == 99)
            {
                LoggerCommon.consol(stnId + "号垛机报警");
                return true;
            }
            return false;
        }

   
        ushort mw10;
        ushort mw11;
        ushort mw12;
        ushort mw13;
        ushort mw14;
        ushort mw15;
        ushort mw16;
        List<string> list = new List<string>();

        public int bLAuto;
        public int bLAlarm;
        public int bLTaskFinish;
        public int bLLoaded;
        public int bLForkZero;
        public int bLState;
        public int nTraveLPos;
        public int nLiftPos;
        public int nForkPos;
        public int bLTaskNo;

        public void clearError() {

            list.Clear();}

        
          void GkCraneError() {

            foreach (RSErrorKey key in Enum.GetValues(typeof(RSErrorKey)))
            {
                int index = (int)key;
                int mw = index / 16;
                int bit = index % 16;
                int begin = 1;
                begin = begin << bit;
                int val = 0;
                if (mw == 0)
                {
                    val = mw10 & begin;
                }
                else if (mw == 1)
                {
                    val = mw11 & begin;
                }
                else if (mw == 2)
                {
                    val = mw12 & begin;
                }
                else if (mw == 3)
                {
                    val = mw13 & begin;
                }
                else if (mw == 4)
                {
                    val = mw14 & begin;
                }
                else if (mw == 5)
                {
                    val = mw15 & begin;
                }
                else if (mw == 6)
                {
                    val = mw16 & begin;
                }
                if (val > 0)
                {
                    list.Add(key.ToString());
                }
            }

        }

        public override int getX()
        {
            throw new NotImplementedException();
        }

        public override int getY()
        {
            throw new NotImplementedException();
        }

        public override int getZ()
        {
            throw new NotImplementedException();
        }

        public override List<string> getError()
        {
            return list;
        }

        public override void parseError(byte[] b)
        {
            mw10 = Tools.ushort16(b, 0);
            mw11 = Tools.ushort16(b, 2);
            mw12 = Tools.ushort16(b, 4);
            mw13 = Tools.ushort16(b, 6);
            mw14 = Tools.ushort16(b, 8);
            mw15 = Tools.ushort16(b, 10);
            mw16 = Tools.ushort16(b, 12);
            GkCraneError();
            lastTime = DateTime.Now.Ticks;
        }

        public override void parseStatus(byte[] b)
        {
            if ((b[0] & 1) == 1)
            {
                bLAuto = 1;
            }
            else
            {
                bLAuto = 0;
            }
            if ((b[0] & 2) == 2)
            {
                bLAlarm = 1;
            }
            else
            {
                bLAlarm = 0;
            }
           
            if ((b[0] & 8) == 8)
            {
                bLLoaded = 1;
            }
            else
            {
                bLLoaded = 0;
            }
            if ((b[0] & 16) == 16)
            {
                bLForkZero = 1;
            }
            else
            {
                bLForkZero = 0;
            }
            bLState = Tools.ushort16(b, 2);
            nTraveLPos = Tools.int32(b, 8);
            nLiftPos = Tools.int32(b, 12);
            nForkPos = Tools.int32(b, 16);
            bLTaskNo = Tools.int32(b, 20);
            bLTaskFinish =Tools.ushort16(b,22);
           lastTime = DateTime.Now.Ticks;
           
        }
    }




}
