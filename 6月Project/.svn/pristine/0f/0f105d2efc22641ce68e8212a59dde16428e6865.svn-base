using Dapper;
using GK.WCS.DAL;
using GK.WCS.Entity;
using GK.WCS.Entity.wcs;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;

namespace GK.Engine.WCS
{
    public class CommentFunction
    {
        public static long BCrane(IDbConnection connection, IDbTransaction transaction, int type, int TaskNo,int srcId, int desId,string boxCode, long completeId, long tCompPId,long id)
        {
            int locX;
            int locY;
            int locZ;
            int locDir;
            int carrierEnd;
            int craneId;
            string Extra;

            if (type == 1)
            {
                Extra = "crane入库";
            }
            else if (type == 2)
            {
                Extra = "crane出库";
            }
            else if (type == 3)
            {
                Extra = "crane移库";
            }
            else
            {
                throw new Exception("at _BCrane,type is" + type + "error");
            }

            Extra = Extra + "--" + desId + "--" + boxCode;

      
                string sql1 = "select * from physical_Location where id=@carrierEnd/100";
                carrierEnd=srcId;
                PhysicalLocation physicalLocation1 = connection.Query<PhysicalLocation>(sql1, new { carrierEnd= carrierEnd }, transaction).FirstOrDefault();
                carrierEnd = desId;
                PhysicalLocation physicalLocation = connection.Query<PhysicalLocation>(sql1, new { carrierEnd = carrierEnd }, transaction).FirstOrDefault();
                
                locX = physicalLocation.x;
                locY = physicalLocation.y;
                locZ = physicalLocation.z;
                craneId = physicalLocation.craneId;
                locDir = physicalLocation.Direction;
                //ISequenceIdServer sequenceIdServer = ServerFactray.getServer<ISequenceIdServer>();
                //id = sequenceIdServer.getId();
                TaskCrane taskCrane = new TaskCrane();
                taskCrane.id = id;
                taskCrane.taskNo = TaskNo;
                taskCrane.craneId = craneId;
                taskCrane.code = boxCode;
                taskCrane.completeId = completeId;
                taskCrane.conpleteParamId= tCompPId;
                taskCrane.Extra = Extra;
                taskCrane.status = 1;
                taskCrane.deviceType =1;
                taskCrane.fromPlcCol = physicalLocation1.x;
                taskCrane.fromPlcRow = physicalLocation1.y;
                taskCrane.fromPlcShelf = physicalLocation1.z;
                taskCrane.toPlcCol = locX;
                taskCrane.toPlcRow = locY;
                taskCrane.toPlcShelf = locZ;
                taskCrane.taskType=type;
                connection.InsertNoNull(taskCrane, transaction);


            
            return id;
        }

        public static int BBTaskNo(IDbConnection connection, IDbTransaction transaction)
        {
            int value = 0;
            string begin;
            BTaskNo bBTaskNo = new BTaskNo();
            string sql1 = "SELECT * FROM B_Task_No WHERE dateline= @now";
            List<BTaskNo> tc = connection.Query<BTaskNo>(sql1, new { now = DateTime.Now.ToString("yyyy-MM-dd") }, transaction).AsList();
            if (tc.Count == 0)
            {
                begin = DateTime.Now.ToString("MMdd");
                value = int.Parse(begin.PadRight(4)) * 1000000;
                value += 1;
                bBTaskNo.dateline = DateTime.Now.ToString("yyyy-MM-dd");
                bBTaskNo.value = value;
                connection.Insert(bBTaskNo, transaction);

            }
            else
            {
                value = tc[0].value;
                value = value + 1;
                string sql2 = "UPDATE B_Task_No SET value=@value WHERE dateline=@now";
                connection.Execute(sql2, new { value = value, now = DateTime.Now.ToString("yyyy-MM-dd") }, transaction);
            }
            return value;
        }

        public static int getInstockEndCarrier(int begin, int end)
        {
            int res;
            if (begin == 102)
            {
                res = end / 1000000;
                res = res * 2 + 117;
                return res;
            }
            return 119100;
        }

        public static void BCarrier(IDbConnection connection, IDbTransaction transaction, int TaskNo, int carrierEnd, string boxCode, long completeId, long tCompPId, int itemType, int srcId,long id)
        {
          
            string extra;
            DateTime now;
            now = DateTime.Now;
            extra = "carrier任务 " + boxCode + "从" + srcId + "搬运到" + carrierEnd;
            if (TaskNo == 0)
            {
                throw new Exception("bcarrier error" + completeId);
            }
            //ISequenceIdServer sequenceIdServer = ServerFactray.getServer<ISequenceIdServer>();
            //id = sequenceIdServer.getId();
            TaskCarrier taskCarrier = new TaskCarrier();
            taskCarrier.id = id;
            taskCarrier.itemType = itemType;
            taskCarrier.startPath = srcId;
            taskCarrier.endPath = carrierEnd;
            taskCarrier.taskNo = TaskNo;
            taskCarrier.code = boxCode;
            taskCarrier.status = 1;
            taskCarrier.completeId = completeId;
            taskCarrier.conpleteParamId = tCompPId;
            taskCarrier.Extra = extra;
            taskCarrier.deviceType = 2;
            
            connection.InsertNoNull(taskCarrier, transaction);

        }

        public static void BCraneRely(IDbConnection connection, IDbTransaction transaction, long taskId,string taskName,long relyId,string  relyName,long completeId)
        {
            long id;
            ISequenceIdServer sequenceIdServer = ServerFactray.getServer<ISequenceIdServer>();
            id = sequenceIdServer.getId();
            TaskRely taskRely=new TaskRely();
            taskRely.id=id;
            taskRely.relyId=relyId;
            taskRely.relyName=relyName;
            taskRely.taskId=taskId;
            taskRely.taskName=taskName;
            taskRely.completeId=completeId;
            connection.Insert(taskRely,transaction);
        }
    }
}

