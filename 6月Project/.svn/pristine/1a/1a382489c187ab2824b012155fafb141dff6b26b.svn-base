using System;
using System.Collections.Generic;
using GK.WCS.Common;

using GK.WCS.Common.Util;
using HY.WCS.Carrier;
using HY.WCS.Common.Entity;

namespace GK.WCS.Carrier {
    public abstract class CarrierWriteConnect:RegistersModbusTcpConnect {
        int plcId=0;

       public CarrierWriteConnect(int plcId) :base(){
            this.plcId = plcId;
        }
      
        public bool SendTask(int taskNo,ushort from,ushort end) {
          
            Path path = null;
            foreach(Path p in Constant.pathList) {
                if(p.from == from && p.end == end) {
                    path =p;
                    break;
                }
            }
            if(path == null) {
                LoggerCommon.fileAll(from +"到"+end+"的路径不存在");
                return false;
            }
            return send(taskNo,path);
         
        }

        
        private bool send(int taskNo,Path p) {

            if(taskNo == 0) {
                taskNo = TaskUtil.getTaskNo();
            }

            string info = "传输线任务" + taskNo + "from：" + p.from + "end:" + p.end + "path" + p.path;
            LoggerCommon.fileAll(info);
            lock(socketLock) {
                short st = readHolding(getSendAddr());
                if(st != (ushort)TaskSendFlag.PLCReadFinish && st != (ushort)TaskSendFlag.INIT) {
                    throw new Exception("输送线PLC无法接收任务,当前状态：" + st);
                }
                var uTask = new List<ushort>();
                uTask.Add(1); // 信息
                uTask.AddRange(Tools.Int2Short(taskNo)); //任务号
                uTask.Add(p.path);
                uTask.Add((ushort)(p.from%100));
                uTask.Add((ushort)(p.end%100));
                write(getSendAddr(),uTask.ToArray(),"传输线任务发送:");
                return true;
              
            }
        }
        public abstract ushort getSendAddr();
    
        public abstract ushort getResetCarrierAddr();
        public abstract ushort getClearTaskAddr();
        public bool clearAction(ushort type,int taskNo) {
           
            if(taskNo > 0) {
                ushort[] shorts = Tools.Int2Short(taskNo);
                var rs = new ushort[] { shorts[0],shorts[1],type };
                
                write(getClearTaskAddr(),rs,"传输线删除任务");
            }

            LoggerCommon.fileAll(taskNo+"clearCarrier：");
            return true;
        }
       
        public void resetAction(ushort path) {
            write(getResetCarrierAddr(),1,"传输线重置");
        }

   
        protected static object socketLock = new object();
        private static object socketLock1 = new object();
    }
}
