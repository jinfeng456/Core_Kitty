<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Core.Api</name>
    </assembly>
    <members>
        <member name="F:Blog.Core.Api.Controllers.CoreClassifyController._coreClassifyServices">
            <summary>
            服务器接口，因为是模板生成，所以首字母是大写的，自己可以重构下
            </summary>
        </member>
        <member name="M:Blog.Core.Api.Controllers.CoreClassifyController.FindPage">
            <summary>
            查询物料分类
            </summary>
            <param name="dto">物料分类</param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.CoreItemController">
            <summary>
            物料管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.CoreItemController.FindPage(Blog.Core.Controllers.CoreItemDto)">
            <summary>
            查询物料信息
            </summary>
            <param name="dto">物料名称</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.CoreItemController.Save(Blog.Core.Model.Models.CoreItem)">
            <summary>
            添加物料
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.CoreItemController.Delete(System.Collections.Generic.List{Blog.Core.Model.Models.CoreItem})">
            <summary>
            删除物料
            </summary>
            <param name="modelList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.CoreItemController.Restore(Blog.Core.Model.Models.CoreItem)">
            <summary>
            物料恢复
            </summary>
            <param name="CoreItem"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.CoreItemController.Disable(Blog.Core.Model.Models.CoreItem)">
            <summary>
            物料禁用
            </summary>
            <param name="CoreItem"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.CoreItemController.ImportList(System.Collections.Generic.List{Blog.Core.Model.Models.CoreItem})">
            <summary>
            导入物料
            </summary>
            <param name="coreItemList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.#ctor(SqlSugar.ISqlSugarClient,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetFrameFiles">
            <summary>
            获取 整体框架 文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            根据数据库表名 生成整体框架
            仅针对通过CodeFirst生成表的情况
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.DbFirstController.GetAllFrameFilesByTableNames(System.String[],System.String)">
            <summary>
            DbFrist 根据数据库表名 生成整体框架,包含Model层
            </summary>
            <param name="ConnID">数据库链接名称</param>
            <param name="tableNames">需要生成的表名</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MigrateController.DataMigrateFromOld2New">
            <summary>
            获取权限部分Map数据（从库）
            迁移到新库（主库）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MigrateController.SaveData2TsvAsync">
            <summary>
            权限数据库导出tsv
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.HealthCheckController">
            <summary>
            健康检查
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.HealthCheckController.Get">
            <summary>
            健康检查接口
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.ImgController">
            <summary>
            图片管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.ImgController.DownImg(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            下载图片（支持中文字符）
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.ImgController.InsertPicture(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            上传图片,多文件，可以使用 postman 测试，
            如果是单文件，可以 参数写 IFormFile file1
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MonitorController.Server">
            <summary>
            服务器配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.MonitorController.Get">
            <summary>
            SignalR send data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.LoginController">
            <summary>
            登录管理【无权限】
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.#ctor(Blog.Core.IServices.ISysUserServices,Blog.Core.IServices.ISysUserInfoServices,Blog.Core.IServices.IUserRoleServices,Blog.Core.IServices.IRoleServices,Blog.Core.AuthHelper.PermissionRequirement,Blog.Core.IServices.IRoleModulePermissionServices)">
            <summary>
            构造函数注入
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="requirement"></param>
            <param name="roleModulePermissionServices"></param>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
            获取JWT的方法1
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtStrForNuxt(System.String,System.String)">
            <summary>
            获取JWT的方法2：给Nuxt提供
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="account"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取JWT的方法4：给 JSONP 测试
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.LoginController.Md5Password(System.String)">
            <summary>
            测试 MD5 加密字符串
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.SysCodeController">
            <summary>
            SysCode
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.SysCodeController.FindPage(Blog.Core.Model.Models.SysCodeDto)">
            <summary>
            查询
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysCodeController.Save(Blog.Core.Model.Models.SysCode)">
            <summary>
            添加
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysCodeController.Delete(System.Collections.Generic.List{Blog.Core.Model.Models.SysCode})">
            <summary>
            删除
            </summary>
            <param name="modelList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysCodeController.GetAllList">
            <summary>
            查询全部
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.SysDictClassController">
            <summary>
            字典分类管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictClassController.FindPage(Blog.Core.Model.ViewModels.SysDictClassDto)">
            <summary>
            查询字典分类
            </summary>
            <param name="dto">字典分类</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictClassController.Save(Blog.Core.Model.Models.SysDictClass)">
            <summary>
            添加字典分类
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictClassController.Delete(System.Collections.Generic.List{Blog.Core.Model.Models.SysDictClass})">
            <summary>
            删除字典分类
            </summary>
            <param name="modelList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictClassController.GetAllList">
            <summary>
            查询全部
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.SysDictController">
            <summary>
            字典管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictController.FindPage(Blog.Core.Model.ViewModels.SysDictDto)">
            <summary>
            查询字典
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictController.Save(Blog.Core.Model.Models.SysDict)">
            <summary>
            添加字典
            </summary>
            <param name="model">字典实体</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictController.Delete(System.Collections.Generic.List{Blog.Core.Model.Models.SysDict})">
            <summary>
            删除字典
            </summary>
            <param name="modelList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysDictController.GetAllDicts">
            <summary>
            获取全部不分页
            </summary>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.SysMenuController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.SysMenuController.Save(Blog.Core.Model.Models.SysMenu)">
            <summary>
            添加菜单
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.SysRoleController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.SysRoleController.FindPage(Blog.Core.Model.ViewModels.SysRoleDto)">
            <summary>
            获取全部角色
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysRoleController.Save(Blog.Core.Model.Models.SysRole)">
            <summary>
            添加角色
            </summary>
            <param name="SysRole"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.SysRoleMenuController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="T:Blog.Core.Controllers.SysUserController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.SysUserController.FindPage(Blog.Core.Model.ViewModels.SysUserDto)">
            <summary>
            获取全部角色
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysUserController.Save(Blog.Core.Model.Models.SysUser)">
            <summary>
            添加用户
            </summary>
            <param name="SysUser"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.SysUserController.GetInfoByToken(System.String)">
            <summary>
            获取用户详情根据token
            【无权限】
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.Controllers.WelComeController">
            <summary>
            首页
            </summary>
        </member>
        <member name="T:Blog.Core.Controllers.TasksQzController1">
            <summary>
            TasksQz
            </summary>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController1.FindPage(Blog.Core.Model.Models.TasksQzDto)">
            <summary>
            查询
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController1.Save(Blog.Core.Model.Models.TasksQz)">
            <summary>
            添加
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController1.Delete(System.Collections.Generic.List{Blog.Core.Model.Models.TasksQz})">
            <summary>
            删除
            </summary>
            <param name="modelList"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController1.GetAllList">
            <summary>
            查询全部
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController1.StartJob(System.Int32)">
            <summary>
            启动计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController1.StopJob(System.Int32)">
            <summary>
            停止一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>        
        </member>
        <member name="M:Blog.Core.Controllers.TasksQzController1.ReCovery(System.Int32)">
            <summary>
            重启一个计划任务
            </summary>
            <param name="jobId"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Core.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:Blog.Core.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:Blog.Core.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:Blog.Core.SwaggerHelper.CustomRouteAttribute.#ctor(Blog.Core.Extensions.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
        <member name="T:Blog.Core.Filter.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:Blog.Core.Filter.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:Blog.Core.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:Blog.Core.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Blog.Core.Filter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:Blog.Core.Filter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:Blog.Core.Filter.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
    </members>
</doc>
